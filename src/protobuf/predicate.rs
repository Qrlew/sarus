// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sarus_data_spec/protobuf/predicate.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:sarus_data_spec.Predicate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Predicate {
    // message fields
    // @@protoc_insertion_point(field:sarus_data_spec.Predicate.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // message oneof groups
    pub predicate: ::std::option::Option<predicate::Predicate>,
    // special fields
    // @@protoc_insertion_point(special_field:sarus_data_spec.Predicate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Predicate {
    fn default() -> &'a Predicate {
        <Predicate as ::protobuf::Message>::default_instance()
    }
}

impl Predicate {
    pub fn new() -> Predicate {
        ::std::default::Default::default()
    }

    // .sarus_data_spec.Predicate.Simple simple = 1;

    pub fn simple(&self) -> &predicate::Simple {
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Simple(ref v)) => v,
            _ => <predicate::Simple as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_simple(&mut self) {
        self.predicate = ::std::option::Option::None;
    }

    pub fn has_simple(&self) -> bool {
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Simple(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_simple(&mut self, v: predicate::Simple) {
        self.predicate = ::std::option::Option::Some(predicate::Predicate::Simple(v))
    }

    // Mutable pointer to the field.
    pub fn mut_simple(&mut self) -> &mut predicate::Simple {
        if let ::std::option::Option::Some(predicate::Predicate::Simple(_)) = self.predicate {
        } else {
            self.predicate = ::std::option::Option::Some(predicate::Predicate::Simple(predicate::Simple::new()));
        }
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Simple(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_simple(&mut self) -> predicate::Simple {
        if self.has_simple() {
            match self.predicate.take() {
                ::std::option::Option::Some(predicate::Predicate::Simple(v)) => v,
                _ => panic!(),
            }
        } else {
            predicate::Simple::new()
        }
    }

    // .sarus_data_spec.Predicate.Inter inter = 2;

    pub fn inter(&self) -> &predicate::Inter {
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Inter(ref v)) => v,
            _ => <predicate::Inter as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_inter(&mut self) {
        self.predicate = ::std::option::Option::None;
    }

    pub fn has_inter(&self) -> bool {
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Inter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_inter(&mut self, v: predicate::Inter) {
        self.predicate = ::std::option::Option::Some(predicate::Predicate::Inter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_inter(&mut self) -> &mut predicate::Inter {
        if let ::std::option::Option::Some(predicate::Predicate::Inter(_)) = self.predicate {
        } else {
            self.predicate = ::std::option::Option::Some(predicate::Predicate::Inter(predicate::Inter::new()));
        }
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Inter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_inter(&mut self) -> predicate::Inter {
        if self.has_inter() {
            match self.predicate.take() {
                ::std::option::Option::Some(predicate::Predicate::Inter(v)) => v,
                _ => panic!(),
            }
        } else {
            predicate::Inter::new()
        }
    }

    // .sarus_data_spec.Predicate.Union union = 3;

    pub fn union(&self) -> &predicate::Union {
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Union(ref v)) => v,
            _ => <predicate::Union as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_union(&mut self) {
        self.predicate = ::std::option::Option::None;
    }

    pub fn has_union(&self) -> bool {
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Union(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_union(&mut self, v: predicate::Union) {
        self.predicate = ::std::option::Option::Some(predicate::Predicate::Union(v))
    }

    // Mutable pointer to the field.
    pub fn mut_union(&mut self) -> &mut predicate::Union {
        if let ::std::option::Option::Some(predicate::Predicate::Union(_)) = self.predicate {
        } else {
            self.predicate = ::std::option::Option::Some(predicate::Predicate::Union(predicate::Union::new()));
        }
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Union(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_union(&mut self) -> predicate::Union {
        if self.has_union() {
            match self.predicate.take() {
                ::std::option::Option::Some(predicate::Predicate::Union(v)) => v,
                _ => panic!(),
            }
        } else {
            predicate::Union::new()
        }
    }

    // .sarus_data_spec.Predicate.Comp comp = 4;

    pub fn comp(&self) -> &predicate::Comp {
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Comp(ref v)) => v,
            _ => <predicate::Comp as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_comp(&mut self) {
        self.predicate = ::std::option::Option::None;
    }

    pub fn has_comp(&self) -> bool {
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Comp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_comp(&mut self, v: predicate::Comp) {
        self.predicate = ::std::option::Option::Some(predicate::Predicate::Comp(v))
    }

    // Mutable pointer to the field.
    pub fn mut_comp(&mut self) -> &mut predicate::Comp {
        if let ::std::option::Option::Some(predicate::Predicate::Comp(_)) = self.predicate {
        } else {
            self.predicate = ::std::option::Option::Some(predicate::Predicate::Comp(predicate::Comp::new()));
        }
        match self.predicate {
            ::std::option::Option::Some(predicate::Predicate::Comp(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_comp(&mut self) -> predicate::Comp {
        if self.has_comp() {
            match self.predicate.take() {
                ::std::option::Option::Some(predicate::Predicate::Comp(v)) => v,
                _ => panic!(),
            }
        } else {
            predicate::Comp::new()
        }
    }

    // repeated .sarus_data_spec.Predicate.PropertiesEntry properties = 5;

    pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.properties
    }

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, predicate::Simple>(
            "simple",
            Predicate::has_simple,
            Predicate::simple,
            Predicate::mut_simple,
            Predicate::set_simple,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, predicate::Inter>(
            "inter",
            Predicate::has_inter,
            Predicate::inter,
            Predicate::mut_inter,
            Predicate::set_inter,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, predicate::Union>(
            "union",
            Predicate::has_union,
            Predicate::union,
            Predicate::mut_union,
            Predicate::set_union,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, predicate::Comp>(
            "comp",
            Predicate::has_comp,
            Predicate::comp,
            Predicate::mut_comp,
            Predicate::set_comp,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &Predicate| { &m.properties },
            |m: &mut Predicate| { &mut m.properties },
        ));
        oneofs.push(predicate::Predicate::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Predicate>(
            "Predicate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Predicate {
    const NAME: &'static str = "Predicate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.predicate = ::std::option::Option::Some(predicate::Predicate::Simple(is.read_message()?));
                },
                18 => {
                    self.predicate = ::std::option::Option::Some(predicate::Predicate::Inter(is.read_message()?));
                },
                26 => {
                    self.predicate = ::std::option::Option::Some(predicate::Predicate::Union(is.read_message()?));
                },
                34 => {
                    self.predicate = ::std::option::Option::Some(predicate::Predicate::Comp(is.read_message()?));
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let ::std::option::Option::Some(ref v) = self.predicate {
            match v {
                &predicate::Predicate::Simple(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &predicate::Predicate::Inter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &predicate::Predicate::Union(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &predicate::Predicate::Comp(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.predicate {
            match v {
                &predicate::Predicate::Simple(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &predicate::Predicate::Inter(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &predicate::Predicate::Union(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &predicate::Predicate::Comp(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Predicate {
        Predicate::new()
    }

    fn clear(&mut self) {
        self.predicate = ::std::option::Option::None;
        self.predicate = ::std::option::Option::None;
        self.predicate = ::std::option::Option::None;
        self.predicate = ::std::option::Option::None;
        self.properties.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Predicate {
        static instance: ::protobuf::rt::Lazy<Predicate> = ::protobuf::rt::Lazy::new();
        instance.get(Predicate::new)
    }
}

impl ::protobuf::MessageFull for Predicate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Predicate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Predicate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Predicate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Predicate`
pub mod predicate {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:sarus_data_spec.Predicate.predicate)
    pub enum Predicate {
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Predicate.simple)
        Simple(Simple),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Predicate.inter)
        Inter(Inter),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Predicate.union)
        Union(Union),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Predicate.comp)
        Comp(Comp),
    }

    impl ::protobuf::Oneof for Predicate {
    }

    impl ::protobuf::OneofFull for Predicate {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Predicate as ::protobuf::MessageFull>::descriptor().oneof_by_name("predicate").unwrap()).clone()
        }
    }

    impl Predicate {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Predicate>("predicate")
        }
    }
    // @@protoc_insertion_point(message:sarus_data_spec.Predicate.Simple)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Simple {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Predicate.Simple.operator)
        pub operator: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Predicate.Simple.value)
        pub value: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Predicate.Simple.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Simple {
        fn default() -> &'a Simple {
            <Simple as ::protobuf::Message>::default_instance()
        }
    }

    impl Simple {
        pub fn new() -> Simple {
            ::std::default::Default::default()
        }

        // string operator = 1;

        pub fn operator(&self) -> &str {
            &self.operator
        }

        pub fn clear_operator(&mut self) {
            self.operator.clear();
        }

        // Param is passed by value, moved
        pub fn set_operator(&mut self, v: ::std::string::String) {
            self.operator = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_operator(&mut self) -> &mut ::std::string::String {
            &mut self.operator
        }

        // Take field
        pub fn take_operator(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.operator, ::std::string::String::new())
        }

        // string value = 2;

        pub fn value(&self) -> &str {
            &self.value
        }

        pub fn clear_value(&mut self) {
            self.value.clear();
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            &mut self.value
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.value, ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "operator",
                |m: &Simple| { &m.operator },
                |m: &mut Simple| { &mut m.operator },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "value",
                |m: &Simple| { &m.value },
                |m: &mut Simple| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Simple>(
                "Predicate.Simple",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Simple {
        const NAME: &'static str = "Simple";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.operator = is.read_string()?;
                    },
                    18 => {
                        self.value = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.operator.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.operator);
            }
            if !self.value.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.value);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.operator.is_empty() {
                os.write_string(1, &self.operator)?;
            }
            if !self.value.is_empty() {
                os.write_string(2, &self.value)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Simple {
            Simple::new()
        }

        fn clear(&mut self) {
            self.operator.clear();
            self.value.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Simple {
            static instance: Simple = Simple {
                operator: ::std::string::String::new(),
                value: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Simple {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Predicate.Simple").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Simple {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Simple {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:sarus_data_spec.Predicate.Inter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Inter {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Predicate.Inter.predicates)
        pub predicates: ::std::vec::Vec<super::Predicate>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Predicate.Inter.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Inter {
        fn default() -> &'a Inter {
            <Inter as ::protobuf::Message>::default_instance()
        }
    }

    impl Inter {
        pub fn new() -> Inter {
            ::std::default::Default::default()
        }

        // repeated .sarus_data_spec.Predicate predicates = 1;

        pub fn predicates(&self) -> &[super::Predicate] {
            &self.predicates
        }

        pub fn clear_predicates(&mut self) {
            self.predicates.clear();
        }

        // Param is passed by value, moved
        pub fn set_predicates(&mut self, v: ::std::vec::Vec<super::Predicate>) {
            self.predicates = v;
        }

        // Mutable pointer to the field.
        pub fn mut_predicates(&mut self) -> &mut ::std::vec::Vec<super::Predicate> {
            &mut self.predicates
        }

        // Take field
        pub fn take_predicates(&mut self) -> ::std::vec::Vec<super::Predicate> {
            ::std::mem::replace(&mut self.predicates, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "predicates",
                |m: &Inter| { &m.predicates },
                |m: &mut Inter| { &mut m.predicates },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Inter>(
                "Predicate.Inter",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Inter {
        const NAME: &'static str = "Inter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.predicates.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.predicates {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.predicates {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Inter {
            Inter::new()
        }

        fn clear(&mut self) {
            self.predicates.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Inter {
            static instance: Inter = Inter {
                predicates: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Inter {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Predicate.Inter").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Inter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Inter {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:sarus_data_spec.Predicate.Union)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Union {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Predicate.Union.predicates)
        pub predicates: ::std::vec::Vec<super::Predicate>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Predicate.Union.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Union {
        fn default() -> &'a Union {
            <Union as ::protobuf::Message>::default_instance()
        }
    }

    impl Union {
        pub fn new() -> Union {
            ::std::default::Default::default()
        }

        // repeated .sarus_data_spec.Predicate predicates = 1;

        pub fn predicates(&self) -> &[super::Predicate] {
            &self.predicates
        }

        pub fn clear_predicates(&mut self) {
            self.predicates.clear();
        }

        // Param is passed by value, moved
        pub fn set_predicates(&mut self, v: ::std::vec::Vec<super::Predicate>) {
            self.predicates = v;
        }

        // Mutable pointer to the field.
        pub fn mut_predicates(&mut self) -> &mut ::std::vec::Vec<super::Predicate> {
            &mut self.predicates
        }

        // Take field
        pub fn take_predicates(&mut self) -> ::std::vec::Vec<super::Predicate> {
            ::std::mem::replace(&mut self.predicates, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "predicates",
                |m: &Union| { &m.predicates },
                |m: &mut Union| { &mut m.predicates },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Union>(
                "Predicate.Union",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Union {
        const NAME: &'static str = "Union";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.predicates.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.predicates {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.predicates {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Union {
            Union::new()
        }

        fn clear(&mut self) {
            self.predicates.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Union {
            static instance: Union = Union {
                predicates: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Union {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Predicate.Union").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Union {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Union {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:sarus_data_spec.Predicate.Comp)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Comp {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Predicate.Comp.predicate)
        pub predicate: ::protobuf::MessageField<super::Predicate>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Predicate.Comp.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Comp {
        fn default() -> &'a Comp {
            <Comp as ::protobuf::Message>::default_instance()
        }
    }

    impl Comp {
        pub fn new() -> Comp {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Predicate predicate = 1;

        pub fn predicate(&self) -> &super::Predicate {
            self.predicate.as_ref().unwrap_or_else(|| <super::Predicate as ::protobuf::Message>::default_instance())
        }

        pub fn clear_predicate(&mut self) {
            self.predicate.clear();
        }

        pub fn has_predicate(&self) -> bool {
            self.predicate.is_some()
        }

        // Param is passed by value, moved
        pub fn set_predicate(&mut self, v: super::Predicate) {
            self.predicate = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_predicate(&mut self) -> &mut super::Predicate {
            self.predicate.mut_or_insert_default()
        }

        // Take field
        pub fn take_predicate(&mut self) -> super::Predicate {
            self.predicate.take().unwrap_or_else(|| super::Predicate::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Predicate>(
                "predicate",
                |m: &Comp| { &m.predicate },
                |m: &mut Comp| { &mut m.predicate },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Comp>(
                "Predicate.Comp",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Comp {
        const NAME: &'static str = "Comp";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.predicate)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.predicate.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.predicate.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Comp {
            Comp::new()
        }

        fn clear(&mut self) {
            self.predicate.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Comp {
            static instance: Comp = Comp {
                predicate: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Comp {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Predicate.Comp").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Comp {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Comp {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(sarus_data_spec/protobuf/predicate.proto\x12\x0fsarus_data_spec\"\x93\
    \x05\n\tPredicate\x12;\n\x06simple\x18\x01\x20\x01(\x0b2!.sarus_data_spe\
    c.Predicate.SimpleH\0R\x06simple\x128\n\x05inter\x18\x02\x20\x01(\x0b2\
    \x20.sarus_data_spec.Predicate.InterH\0R\x05inter\x128\n\x05union\x18\
    \x03\x20\x01(\x0b2\x20.sarus_data_spec.Predicate.UnionH\0R\x05union\x125\
    \n\x04comp\x18\x04\x20\x01(\x0b2\x1f.sarus_data_spec.Predicate.CompH\0R\
    \x04comp\x12J\n\nproperties\x18\x05\x20\x03(\x0b2*.sarus_data_spec.Predi\
    cate.PropertiesEntryR\nproperties\x1a=\n\x0fPropertiesEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\x1a:\n\x06Simple\x12\x1a\n\x08operator\x18\x01\x20\
    \x01(\tR\x08operator\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\x1a\
    C\n\x05Inter\x12:\n\npredicates\x18\x01\x20\x03(\x0b2\x1a.sarus_data_spe\
    c.PredicateR\npredicates\x1aC\n\x05Union\x12:\n\npredicates\x18\x01\x20\
    \x03(\x0b2\x1a.sarus_data_spec.PredicateR\npredicates\x1a@\n\x04Comp\x12\
    8\n\tpredicate\x18\x01\x20\x01(\x0b2\x1a.sarus_data_spec.PredicateR\tpre\
    dicateB\x0b\n\tpredicateb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Predicate::generated_message_descriptor_data());
            messages.push(predicate::Simple::generated_message_descriptor_data());
            messages.push(predicate::Inter::generated_message_descriptor_data());
            messages.push(predicate::Union::generated_message_descriptor_data());
            messages.push(predicate::Comp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
