// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sarus_data_spec/protobuf/constraint.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:sarus_data_spec.VariantConstraint)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VariantConstraint {
    // message fields
    // @@protoc_insertion_point(field:sarus_data_spec.VariantConstraint.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.VariantConstraint.dataspec)
    pub dataspec: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.VariantConstraint.constraint_kind)
    pub constraint_kind: ::protobuf::EnumOrUnknown<ConstraintKind>,
    // @@protoc_insertion_point(field:sarus_data_spec.VariantConstraint.required_context)
    pub required_context: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:sarus_data_spec.VariantConstraint.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:sarus_data_spec.VariantConstraint.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VariantConstraint {
    fn default() -> &'a VariantConstraint {
        <VariantConstraint as ::protobuf::Message>::default_instance()
    }
}

impl VariantConstraint {
    pub fn new() -> VariantConstraint {
        ::std::default::Default::default()
    }

    // string uuid = 1;

    pub fn uuid(&self) -> &str {
        &self.uuid
    }

    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // string dataspec = 2;

    pub fn dataspec(&self) -> &str {
        &self.dataspec
    }

    pub fn clear_dataspec(&mut self) {
        self.dataspec.clear();
    }

    // Param is passed by value, moved
    pub fn set_dataspec(&mut self, v: ::std::string::String) {
        self.dataspec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataspec(&mut self) -> &mut ::std::string::String {
        &mut self.dataspec
    }

    // Take field
    pub fn take_dataspec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dataspec, ::std::string::String::new())
    }

    // .sarus_data_spec.ConstraintKind constraint_kind = 3;

    pub fn constraint_kind(&self) -> ConstraintKind {
        self.constraint_kind.enum_value_or_default()
    }

    pub fn clear_constraint_kind(&mut self) {
        self.constraint_kind = ::protobuf::EnumOrUnknown::new(ConstraintKind::SYNTHETIC);
    }

    // Param is passed by value, moved
    pub fn set_constraint_kind(&mut self, v: ConstraintKind) {
        self.constraint_kind = ::protobuf::EnumOrUnknown::new(v);
    }

    // repeated string required_context = 4;

    pub fn required_context(&self) -> &[::std::string::String] {
        &self.required_context
    }

    pub fn clear_required_context(&mut self) {
        self.required_context.clear();
    }

    // Param is passed by value, moved
    pub fn set_required_context(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.required_context = v;
    }

    // Mutable pointer to the field.
    pub fn mut_required_context(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.required_context
    }

    // Take field
    pub fn take_required_context(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.required_context, ::std::vec::Vec::new())
    }

    // repeated .sarus_data_spec.VariantConstraint.PropertiesEntry properties = 5;

    pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.properties
    }

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &VariantConstraint| { &m.uuid },
            |m: &mut VariantConstraint| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dataspec",
            |m: &VariantConstraint| { &m.dataspec },
            |m: &mut VariantConstraint| { &mut m.dataspec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "constraint_kind",
            |m: &VariantConstraint| { &m.constraint_kind },
            |m: &mut VariantConstraint| { &mut m.constraint_kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "required_context",
            |m: &VariantConstraint| { &m.required_context },
            |m: &mut VariantConstraint| { &mut m.required_context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &VariantConstraint| { &m.properties },
            |m: &mut VariantConstraint| { &mut m.properties },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VariantConstraint>(
            "VariantConstraint",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VariantConstraint {
    const NAME: &'static str = "VariantConstraint";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uuid = is.read_string()?;
                },
                18 => {
                    self.dataspec = is.read_string()?;
                },
                24 => {
                    self.constraint_kind = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.required_context.push(is.read_string()?);
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if !self.dataspec.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.dataspec);
        }
        if self.constraint_kind != ::protobuf::EnumOrUnknown::new(ConstraintKind::SYNTHETIC) {
            my_size += ::protobuf::rt::int32_size(3, self.constraint_kind.value());
        }
        for value in &self.required_context {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if !self.dataspec.is_empty() {
            os.write_string(2, &self.dataspec)?;
        }
        if self.constraint_kind != ::protobuf::EnumOrUnknown::new(ConstraintKind::SYNTHETIC) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.constraint_kind))?;
        }
        for v in &self.required_context {
            os.write_string(4, &v)?;
        };
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VariantConstraint {
        VariantConstraint::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.dataspec.clear();
        self.constraint_kind = ::protobuf::EnumOrUnknown::new(ConstraintKind::SYNTHETIC);
        self.required_context.clear();
        self.properties.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VariantConstraint {
        static instance: ::protobuf::rt::Lazy<VariantConstraint> = ::protobuf::rt::Lazy::new();
        instance.get(VariantConstraint::new)
    }
}

impl ::protobuf::MessageFull for VariantConstraint {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VariantConstraint").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VariantConstraint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VariantConstraint {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:sarus_data_spec.ConstraintKind)
pub enum ConstraintKind {
    // @@protoc_insertion_point(enum_value:sarus_data_spec.ConstraintKind.SYNTHETIC)
    SYNTHETIC = 0,
    // @@protoc_insertion_point(enum_value:sarus_data_spec.ConstraintKind.DP)
    DP = 1,
    // @@protoc_insertion_point(enum_value:sarus_data_spec.ConstraintKind.PUBLIC)
    PUBLIC = 2,
    // @@protoc_insertion_point(enum_value:sarus_data_spec.ConstraintKind.PEP)
    PEP = 3,
    // @@protoc_insertion_point(enum_value:sarus_data_spec.ConstraintKind.MOCK)
    MOCK = 4,
}

impl ::protobuf::Enum for ConstraintKind {
    const NAME: &'static str = "ConstraintKind";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConstraintKind> {
        match value {
            0 => ::std::option::Option::Some(ConstraintKind::SYNTHETIC),
            1 => ::std::option::Option::Some(ConstraintKind::DP),
            2 => ::std::option::Option::Some(ConstraintKind::PUBLIC),
            3 => ::std::option::Option::Some(ConstraintKind::PEP),
            4 => ::std::option::Option::Some(ConstraintKind::MOCK),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ConstraintKind> {
        match str {
            "SYNTHETIC" => ::std::option::Option::Some(ConstraintKind::SYNTHETIC),
            "DP" => ::std::option::Option::Some(ConstraintKind::DP),
            "PUBLIC" => ::std::option::Option::Some(ConstraintKind::PUBLIC),
            "PEP" => ::std::option::Option::Some(ConstraintKind::PEP),
            "MOCK" => ::std::option::Option::Some(ConstraintKind::MOCK),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ConstraintKind] = &[
        ConstraintKind::SYNTHETIC,
        ConstraintKind::DP,
        ConstraintKind::PUBLIC,
        ConstraintKind::PEP,
        ConstraintKind::MOCK,
    ];
}

impl ::protobuf::EnumFull for ConstraintKind {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ConstraintKind").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ConstraintKind {
    fn default() -> Self {
        ConstraintKind::SYNTHETIC
    }
}

impl ConstraintKind {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ConstraintKind>("ConstraintKind")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)sarus_data_spec/protobuf/constraint.proto\x12\x0fsarus_data_spec\"\
    \xcb\x02\n\x11VariantConstraint\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\
    \x04uuid\x12\x1a\n\x08dataspec\x18\x02\x20\x01(\tR\x08dataspec\x12H\n\
    \x0fconstraint_kind\x18\x03\x20\x01(\x0e2\x1f.sarus_data_spec.Constraint\
    KindR\x0econstraintKind\x12)\n\x10required_context\x18\x04\x20\x03(\tR\
    \x0frequiredContext\x12R\n\nproperties\x18\x05\x20\x03(\x0b22.sarus_data\
    _spec.VariantConstraint.PropertiesEntryR\nproperties\x1a=\n\x0fPropertie\
    sEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01*F\n\x0eConstraintKind\x12\r\n\tS\
    YNTHETIC\x10\0\x12\x06\n\x02DP\x10\x01\x12\n\n\x06PUBLIC\x10\x02\x12\x07\
    \n\x03PEP\x10\x03\x12\x08\n\x04MOCK\x10\x04b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(VariantConstraint::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ConstraintKind::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
