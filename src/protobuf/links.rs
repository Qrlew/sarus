// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sarus_data_spec/protobuf/links.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sarus_data_spec.Links)
pub struct Links {
    // message fields
    // @@protoc_insertion_point(field:sarus_data_spec.Links.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Links.dataset)
    pub dataset: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Links.links_statistics)
    pub links_statistics: ::std::vec::Vec<links::LinkStat>,
    // @@protoc_insertion_point(field:sarus_data_spec.Links.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:sarus_data_spec.Links.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Links {
    fn default() -> &'a Links {
        <Links as ::protobuf::Message>::default_instance()
    }
}

impl Links {
    pub fn new() -> Links {
        ::std::default::Default::default()
    }

    // string uuid = 1;

    pub fn uuid(&self) -> &str {
        &self.uuid
    }

    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // string dataset = 2;

    pub fn dataset(&self) -> &str {
        &self.dataset
    }

    pub fn clear_dataset(&mut self) {
        self.dataset.clear();
    }

    // Param is passed by value, moved
    pub fn set_dataset(&mut self, v: ::std::string::String) {
        self.dataset = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataset(&mut self) -> &mut ::std::string::String {
        &mut self.dataset
    }

    // Take field
    pub fn take_dataset(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dataset, ::std::string::String::new())
    }

    // repeated .sarus_data_spec.Links.LinkStat links_statistics = 3;

    pub fn links_statistics(&self) -> &[links::LinkStat] {
        &self.links_statistics
    }

    pub fn clear_links_statistics(&mut self) {
        self.links_statistics.clear();
    }

    // Param is passed by value, moved
    pub fn set_links_statistics(&mut self, v: ::std::vec::Vec<links::LinkStat>) {
        self.links_statistics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_links_statistics(&mut self) -> &mut ::std::vec::Vec<links::LinkStat> {
        &mut self.links_statistics
    }

    // Take field
    pub fn take_links_statistics(&mut self) -> ::std::vec::Vec<links::LinkStat> {
        ::std::mem::replace(&mut self.links_statistics, ::std::vec::Vec::new())
    }

    // repeated .sarus_data_spec.Links.PropertiesEntry properties = 4;

    pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.properties
    }

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &Links| { &m.uuid },
            |m: &mut Links| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dataset",
            |m: &Links| { &m.dataset },
            |m: &mut Links| { &mut m.dataset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "links_statistics",
            |m: &Links| { &m.links_statistics },
            |m: &mut Links| { &mut m.links_statistics },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &Links| { &m.properties },
            |m: &mut Links| { &mut m.properties },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Links>(
            "Links",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Links {
    const NAME: &'static str = "Links";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uuid = is.read_string()?;
                },
                18 => {
                    self.dataset = is.read_string()?;
                },
                26 => {
                    self.links_statistics.push(is.read_message()?);
                },
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if !self.dataset.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.dataset);
        }
        for value in &self.links_statistics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if !self.dataset.is_empty() {
            os.write_string(2, &self.dataset)?;
        }
        for v in &self.links_statistics {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Links {
        Links::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.dataset.clear();
        self.links_statistics.clear();
        self.properties.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Links {
        static instance: ::protobuf::rt::Lazy<Links> = ::protobuf::rt::Lazy::new();
        instance.get(Links::new)
    }
}

impl ::protobuf::MessageFull for Links {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Links").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Links {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Links {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Links`
pub mod links {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Links.LinkStat)
    pub struct LinkStat {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Links.LinkStat.pointing)
        pub pointing: ::protobuf::MessageField<super::super::path::Path>,
        // @@protoc_insertion_point(field:sarus_data_spec.Links.LinkStat.pointed)
        pub pointed: ::protobuf::MessageField<super::super::path::Path>,
        // @@protoc_insertion_point(field:sarus_data_spec.Links.LinkStat.distribution)
        pub distribution: ::protobuf::MessageField<super::super::statistics::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Links.LinkStat.properties)
        pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Links.LinkStat.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LinkStat {
        fn default() -> &'a LinkStat {
            <LinkStat as ::protobuf::Message>::default_instance()
        }
    }

    impl LinkStat {
        pub fn new() -> LinkStat {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Path pointing = 1;

        pub fn pointing(&self) -> &super::super::path::Path {
            self.pointing.as_ref().unwrap_or_else(|| <super::super::path::Path as ::protobuf::Message>::default_instance())
        }

        pub fn clear_pointing(&mut self) {
            self.pointing.clear();
        }

        pub fn has_pointing(&self) -> bool {
            self.pointing.is_some()
        }

        // Param is passed by value, moved
        pub fn set_pointing(&mut self, v: super::super::path::Path) {
            self.pointing = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_pointing(&mut self) -> &mut super::super::path::Path {
            self.pointing.mut_or_insert_default()
        }

        // Take field
        pub fn take_pointing(&mut self) -> super::super::path::Path {
            self.pointing.take().unwrap_or_else(|| super::super::path::Path::new())
        }

        // .sarus_data_spec.Path pointed = 2;

        pub fn pointed(&self) -> &super::super::path::Path {
            self.pointed.as_ref().unwrap_or_else(|| <super::super::path::Path as ::protobuf::Message>::default_instance())
        }

        pub fn clear_pointed(&mut self) {
            self.pointed.clear();
        }

        pub fn has_pointed(&self) -> bool {
            self.pointed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_pointed(&mut self, v: super::super::path::Path) {
            self.pointed = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_pointed(&mut self) -> &mut super::super::path::Path {
            self.pointed.mut_or_insert_default()
        }

        // Take field
        pub fn take_pointed(&mut self) -> super::super::path::Path {
            self.pointed.take().unwrap_or_else(|| super::super::path::Path::new())
        }

        // .sarus_data_spec.Distribution distribution = 3;

        pub fn distribution(&self) -> &super::super::statistics::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::super::statistics::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::super::statistics::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::super::statistics::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::super::statistics::Distribution {
            self.distribution.take().unwrap_or_else(|| super::super::statistics::Distribution::new())
        }

        // repeated .sarus_data_spec.Links.LinkStat.PropertiesEntry properties = 4;

        pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
            &self.properties
        }

        pub fn clear_properties(&mut self) {
            self.properties.clear();
        }

        // Param is passed by value, moved
        pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
            self.properties = v;
        }

        // Mutable pointer to the field.
        pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
            &mut self.properties
        }

        // Take field
        pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
            ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::path::Path>(
                "pointing",
                |m: &LinkStat| { &m.pointing },
                |m: &mut LinkStat| { &mut m.pointing },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::path::Path>(
                "pointed",
                |m: &LinkStat| { &m.pointed },
                |m: &mut LinkStat| { &mut m.pointed },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::statistics::Distribution>(
                "distribution",
                |m: &LinkStat| { &m.distribution },
                |m: &mut LinkStat| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
                "properties",
                |m: &LinkStat| { &m.properties },
                |m: &mut LinkStat| { &mut m.properties },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LinkStat>(
                "Links.LinkStat",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LinkStat {
        const NAME: &'static str = "LinkStat";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.pointing)?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.pointed)?;
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    34 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                18 => value = is.read_string()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.properties.insert(key, value);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.pointing.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.pointed.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            for (k, v) in &self.properties {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.pointing.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.pointed.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            for (k, v) in &self.properties {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                os.write_raw_varint32(34)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                os.write_string(2, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LinkStat {
            LinkStat::new()
        }

        fn clear(&mut self) {
            self.pointing.clear();
            self.pointed.clear();
            self.distribution.clear();
            self.properties.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LinkStat {
            static instance: ::protobuf::rt::Lazy<LinkStat> = ::protobuf::rt::Lazy::new();
            instance.get(LinkStat::new)
        }
    }

    impl ::protobuf::MessageFull for LinkStat {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Links.LinkStat").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LinkStat {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LinkStat {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$sarus_data_spec/protobuf/links.proto\x12\x0fsarus_data_spec\x1a#sarus\
    _data_spec/protobuf/path.proto\x1a)sarus_data_spec/protobuf/statistics.p\
    roto\"\xcc\x04\n\x05Links\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuid\
    \x12\x18\n\x07dataset\x18\x02\x20\x01(\tR\x07dataset\x12J\n\x10links_sta\
    tistics\x18\x03\x20\x03(\x0b2\x1f.sarus_data_spec.Links.LinkStatR\x0flin\
    ksStatistics\x12F\n\nproperties\x18\x04\x20\x03(\x0b2&.sarus_data_spec.L\
    inks.PropertiesEntryR\nproperties\x1a=\n\x0fPropertiesEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\x1a\xc1\x02\n\x08LinkStat\x121\n\x08pointing\x18\
    \x01\x20\x01(\x0b2\x15.sarus_data_spec.PathR\x08pointing\x12/\n\x07point\
    ed\x18\x02\x20\x01(\x0b2\x15.sarus_data_spec.PathR\x07pointed\x12A\n\x0c\
    distribution\x18\x03\x20\x01(\x0b2\x1d.sarus_data_spec.DistributionR\x0c\
    distribution\x12O\n\nproperties\x18\x04\x20\x03(\x0b2/.sarus_data_spec.L\
    inks.LinkStat.PropertiesEntryR\nproperties\x1a=\n\x0fPropertiesEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\
    \x01(\tR\x05value:\x028\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::path::file_descriptor().clone());
            deps.push(super::statistics::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Links::generated_message_descriptor_data());
            messages.push(links::LinkStat::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
