// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sarus_data_spec/protobuf/dataset.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sarus_data_spec.Dataset)
pub struct Dataset {
    // message fields
    // @@protoc_insertion_point(field:sarus_data_spec.Dataset.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Dataset.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Dataset.doc)
    pub doc: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Dataset.spec)
    pub spec: ::protobuf::MessageField<dataset::Spec>,
    // @@protoc_insertion_point(field:sarus_data_spec.Dataset.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:sarus_data_spec.Dataset.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Dataset {
    fn default() -> &'a Dataset {
        <Dataset as ::protobuf::Message>::default_instance()
    }
}

impl Dataset {
    pub fn new() -> Dataset {
        ::std::default::Default::default()
    }

    // string uuid = 1;

    pub fn uuid(&self) -> &str {
        &self.uuid
    }

    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // string name = 2;

    pub fn name(&self) -> &str {
        &self.name
    }

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string doc = 3;

    pub fn doc(&self) -> &str {
        &self.doc
    }

    pub fn clear_doc(&mut self) {
        self.doc.clear();
    }

    // Param is passed by value, moved
    pub fn set_doc(&mut self, v: ::std::string::String) {
        self.doc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_doc(&mut self) -> &mut ::std::string::String {
        &mut self.doc
    }

    // Take field
    pub fn take_doc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.doc, ::std::string::String::new())
    }

    // .sarus_data_spec.Dataset.Spec spec = 4;

    pub fn spec(&self) -> &dataset::Spec {
        self.spec.as_ref().unwrap_or_else(|| <dataset::Spec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: dataset::Spec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut dataset::Spec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> dataset::Spec {
        self.spec.take().unwrap_or_else(|| dataset::Spec::new())
    }

    // repeated .sarus_data_spec.Dataset.PropertiesEntry properties = 5;

    pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.properties
    }

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &Dataset| { &m.uuid },
            |m: &mut Dataset| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Dataset| { &m.name },
            |m: &mut Dataset| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "doc",
            |m: &Dataset| { &m.doc },
            |m: &mut Dataset| { &mut m.doc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, dataset::Spec>(
            "spec",
            |m: &Dataset| { &m.spec },
            |m: &mut Dataset| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &Dataset| { &m.properties },
            |m: &mut Dataset| { &mut m.properties },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Dataset>(
            "Dataset",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Dataset {
    const NAME: &'static str = "Dataset";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uuid = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.doc = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.doc.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.doc);
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.doc.is_empty() {
            os.write_string(3, &self.doc)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Dataset {
        Dataset::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.name.clear();
        self.doc.clear();
        self.spec.clear();
        self.properties.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Dataset {
        static instance: ::protobuf::rt::Lazy<Dataset> = ::protobuf::rt::Lazy::new();
        instance.get(Dataset::new)
    }
}

impl ::protobuf::MessageFull for Dataset {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Dataset").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Dataset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Dataset {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Dataset`
pub mod dataset {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Dataset.Spec)
    pub struct Spec {
        // message oneof groups
        pub spec: ::std::option::Option<spec::Spec>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Dataset.Spec.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Spec {
        fn default() -> &'a Spec {
            <Spec as ::protobuf::Message>::default_instance()
        }
    }

    impl Spec {
        pub fn new() -> Spec {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Dataset.Transformed transformed = 1;

        pub fn transformed(&self) -> &Transformed {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Transformed(ref v)) => v,
                _ => <Transformed as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_transformed(&mut self) {
            self.spec = ::std::option::Option::None;
        }

        pub fn has_transformed(&self) -> bool {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Transformed(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_transformed(&mut self, v: Transformed) {
            self.spec = ::std::option::Option::Some(spec::Spec::Transformed(v))
        }

        // Mutable pointer to the field.
        pub fn mut_transformed(&mut self) -> &mut Transformed {
            if let ::std::option::Option::Some(spec::Spec::Transformed(_)) = self.spec {
            } else {
                self.spec = ::std::option::Option::Some(spec::Spec::Transformed(Transformed::new()));
            }
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Transformed(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_transformed(&mut self) -> Transformed {
            if self.has_transformed() {
                match self.spec.take() {
                    ::std::option::Option::Some(spec::Spec::Transformed(v)) => v,
                    _ => panic!(),
                }
            } else {
                Transformed::new()
            }
        }

        // .sarus_data_spec.Dataset.File file = 2;

        pub fn file(&self) -> &File {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::File(ref v)) => v,
                _ => <File as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_file(&mut self) {
            self.spec = ::std::option::Option::None;
        }

        pub fn has_file(&self) -> bool {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::File(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_file(&mut self, v: File) {
            self.spec = ::std::option::Option::Some(spec::Spec::File(v))
        }

        // Mutable pointer to the field.
        pub fn mut_file(&mut self) -> &mut File {
            if let ::std::option::Option::Some(spec::Spec::File(_)) = self.spec {
            } else {
                self.spec = ::std::option::Option::Some(spec::Spec::File(File::new()));
            }
            match self.spec {
                ::std::option::Option::Some(spec::Spec::File(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_file(&mut self) -> File {
            if self.has_file() {
                match self.spec.take() {
                    ::std::option::Option::Some(spec::Spec::File(v)) => v,
                    _ => panic!(),
                }
            } else {
                File::new()
            }
        }

        // .sarus_data_spec.Dataset.Files files = 3;

        pub fn files(&self) -> &Files {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Files(ref v)) => v,
                _ => <Files as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_files(&mut self) {
            self.spec = ::std::option::Option::None;
        }

        pub fn has_files(&self) -> bool {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Files(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_files(&mut self, v: Files) {
            self.spec = ::std::option::Option::Some(spec::Spec::Files(v))
        }

        // Mutable pointer to the field.
        pub fn mut_files(&mut self) -> &mut Files {
            if let ::std::option::Option::Some(spec::Spec::Files(_)) = self.spec {
            } else {
                self.spec = ::std::option::Option::Some(spec::Spec::Files(Files::new()));
            }
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Files(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_files(&mut self) -> Files {
            if self.has_files() {
                match self.spec.take() {
                    ::std::option::Option::Some(spec::Spec::Files(v)) => v,
                    _ => panic!(),
                }
            } else {
                Files::new()
            }
        }

        // .sarus_data_spec.Dataset.Archive archive = 4;

        pub fn archive(&self) -> &Archive {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Archive(ref v)) => v,
                _ => <Archive as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_archive(&mut self) {
            self.spec = ::std::option::Option::None;
        }

        pub fn has_archive(&self) -> bool {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Archive(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_archive(&mut self, v: Archive) {
            self.spec = ::std::option::Option::Some(spec::Spec::Archive(v))
        }

        // Mutable pointer to the field.
        pub fn mut_archive(&mut self) -> &mut Archive {
            if let ::std::option::Option::Some(spec::Spec::Archive(_)) = self.spec {
            } else {
                self.spec = ::std::option::Option::Some(spec::Spec::Archive(Archive::new()));
            }
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Archive(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_archive(&mut self) -> Archive {
            if self.has_archive() {
                match self.spec.take() {
                    ::std::option::Option::Some(spec::Spec::Archive(v)) => v,
                    _ => panic!(),
                }
            } else {
                Archive::new()
            }
        }

        // .sarus_data_spec.Dataset.Sql sql = 5;

        pub fn sql(&self) -> &Sql {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Sql(ref v)) => v,
                _ => <Sql as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_sql(&mut self) {
            self.spec = ::std::option::Option::None;
        }

        pub fn has_sql(&self) -> bool {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Sql(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_sql(&mut self, v: Sql) {
            self.spec = ::std::option::Option::Some(spec::Spec::Sql(v))
        }

        // Mutable pointer to the field.
        pub fn mut_sql(&mut self) -> &mut Sql {
            if let ::std::option::Option::Some(spec::Spec::Sql(_)) = self.spec {
            } else {
                self.spec = ::std::option::Option::Some(spec::Spec::Sql(Sql::new()));
            }
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Sql(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_sql(&mut self) -> Sql {
            if self.has_sql() {
                match self.spec.take() {
                    ::std::option::Option::Some(spec::Spec::Sql(v)) => v,
                    _ => panic!(),
                }
            } else {
                Sql::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Transformed>(
                "transformed",
                Spec::has_transformed,
                Spec::transformed,
                Spec::mut_transformed,
                Spec::set_transformed,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, File>(
                "file",
                Spec::has_file,
                Spec::file,
                Spec::mut_file,
                Spec::set_file,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Files>(
                "files",
                Spec::has_files,
                Spec::files,
                Spec::mut_files,
                Spec::set_files,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Archive>(
                "archive",
                Spec::has_archive,
                Spec::archive,
                Spec::mut_archive,
                Spec::set_archive,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Sql>(
                "sql",
                Spec::has_sql,
                Spec::sql,
                Spec::mut_sql,
                Spec::set_sql,
            ));
            oneofs.push(spec::Spec::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Spec>(
                "Dataset.Spec",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Spec {
        const NAME: &'static str = "Spec";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.spec = ::std::option::Option::Some(spec::Spec::Transformed(is.read_message()?));
                    },
                    18 => {
                        self.spec = ::std::option::Option::Some(spec::Spec::File(is.read_message()?));
                    },
                    26 => {
                        self.spec = ::std::option::Option::Some(spec::Spec::Files(is.read_message()?));
                    },
                    34 => {
                        self.spec = ::std::option::Option::Some(spec::Spec::Archive(is.read_message()?));
                    },
                    42 => {
                        self.spec = ::std::option::Option::Some(spec::Spec::Sql(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.spec {
                match v {
                    &spec::Spec::Transformed(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &spec::Spec::File(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &spec::Spec::Files(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &spec::Spec::Archive(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &spec::Spec::Sql(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.spec {
                match v {
                    &spec::Spec::Transformed(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &spec::Spec::File(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                    &spec::Spec::Files(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    },
                    &spec::Spec::Archive(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                    },
                    &spec::Spec::Sql(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Spec {
            Spec::new()
        }

        fn clear(&mut self) {
            self.spec = ::std::option::Option::None;
            self.spec = ::std::option::Option::None;
            self.spec = ::std::option::Option::None;
            self.spec = ::std::option::Option::None;
            self.spec = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Spec {
            static instance: Spec = Spec {
                spec: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Spec {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Dataset.Spec").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Spec {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Spec {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Spec`
    pub mod spec {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:sarus_data_spec.Dataset.Spec.spec)
        pub enum Spec {
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Dataset.Spec.transformed)
            Transformed(super::Transformed),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Dataset.Spec.file)
            File(super::File),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Dataset.Spec.files)
            Files(super::Files),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Dataset.Spec.archive)
            Archive(super::Archive),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Dataset.Spec.sql)
            Sql(super::Sql),
        }

        impl ::protobuf::Oneof for Spec {
        }

        impl ::protobuf::OneofFull for Spec {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Spec as ::protobuf::MessageFull>::descriptor().oneof_by_name("spec").unwrap()).clone()
            }
        }

        impl Spec {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Spec>("spec")
            }
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Dataset.Transformed)
    pub struct Transformed {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Transformed.transform)
        pub transform: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Transformed.arguments)
        pub arguments: ::std::vec::Vec<::std::string::String>,
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Transformed.named_arguments)
        pub named_arguments: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Dataset.Transformed.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Transformed {
        fn default() -> &'a Transformed {
            <Transformed as ::protobuf::Message>::default_instance()
        }
    }

    impl Transformed {
        pub fn new() -> Transformed {
            ::std::default::Default::default()
        }

        // string transform = 1;

        pub fn transform(&self) -> &str {
            &self.transform
        }

        pub fn clear_transform(&mut self) {
            self.transform.clear();
        }

        // Param is passed by value, moved
        pub fn set_transform(&mut self, v: ::std::string::String) {
            self.transform = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_transform(&mut self) -> &mut ::std::string::String {
            &mut self.transform
        }

        // Take field
        pub fn take_transform(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.transform, ::std::string::String::new())
        }

        // repeated string arguments = 2;

        pub fn arguments(&self) -> &[::std::string::String] {
            &self.arguments
        }

        pub fn clear_arguments(&mut self) {
            self.arguments.clear();
        }

        // Param is passed by value, moved
        pub fn set_arguments(&mut self, v: ::std::vec::Vec<::std::string::String>) {
            self.arguments = v;
        }

        // Mutable pointer to the field.
        pub fn mut_arguments(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
            &mut self.arguments
        }

        // Take field
        pub fn take_arguments(&mut self) -> ::std::vec::Vec<::std::string::String> {
            ::std::mem::replace(&mut self.arguments, ::std::vec::Vec::new())
        }

        // repeated .sarus_data_spec.Dataset.Transformed.NamedArgumentsEntry named_arguments = 3;

        pub fn named_arguments(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
            &self.named_arguments
        }

        pub fn clear_named_arguments(&mut self) {
            self.named_arguments.clear();
        }

        // Param is passed by value, moved
        pub fn set_named_arguments(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
            self.named_arguments = v;
        }

        // Mutable pointer to the field.
        pub fn mut_named_arguments(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
            &mut self.named_arguments
        }

        // Take field
        pub fn take_named_arguments(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
            ::std::mem::replace(&mut self.named_arguments, ::std::collections::HashMap::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "transform",
                |m: &Transformed| { &m.transform },
                |m: &mut Transformed| { &mut m.transform },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "arguments",
                |m: &Transformed| { &m.arguments },
                |m: &mut Transformed| { &mut m.arguments },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
                "named_arguments",
                |m: &Transformed| { &m.named_arguments },
                |m: &mut Transformed| { &mut m.named_arguments },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transformed>(
                "Dataset.Transformed",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Transformed {
        const NAME: &'static str = "Transformed";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.transform = is.read_string()?;
                    },
                    18 => {
                        self.arguments.push(is.read_string()?);
                    },
                    26 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                18 => value = is.read_string()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.named_arguments.insert(key, value);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.transform.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.transform);
            }
            for value in &self.arguments {
                my_size += ::protobuf::rt::string_size(2, &value);
            };
            for (k, v) in &self.named_arguments {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.transform.is_empty() {
                os.write_string(1, &self.transform)?;
            }
            for v in &self.arguments {
                os.write_string(2, &v)?;
            };
            for (k, v) in &self.named_arguments {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                os.write_raw_varint32(26)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                os.write_string(2, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Transformed {
            Transformed::new()
        }

        fn clear(&mut self) {
            self.transform.clear();
            self.arguments.clear();
            self.named_arguments.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Transformed {
            static instance: ::protobuf::rt::Lazy<Transformed> = ::protobuf::rt::Lazy::new();
            instance.get(Transformed::new)
        }
    }

    impl ::protobuf::MessageFull for Transformed {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Dataset.Transformed").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Transformed {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Transformed {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Dataset.File)
    pub struct File {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.File.format)
        pub format: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.File.uri)
        pub uri: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Dataset.File.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a File {
        fn default() -> &'a File {
            <File as ::protobuf::Message>::default_instance()
        }
    }

    impl File {
        pub fn new() -> File {
            ::std::default::Default::default()
        }

        // string format = 1;

        pub fn format(&self) -> &str {
            &self.format
        }

        pub fn clear_format(&mut self) {
            self.format.clear();
        }

        // Param is passed by value, moved
        pub fn set_format(&mut self, v: ::std::string::String) {
            self.format = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_format(&mut self) -> &mut ::std::string::String {
            &mut self.format
        }

        // Take field
        pub fn take_format(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.format, ::std::string::String::new())
        }

        // string uri = 2;

        pub fn uri(&self) -> &str {
            &self.uri
        }

        pub fn clear_uri(&mut self) {
            self.uri.clear();
        }

        // Param is passed by value, moved
        pub fn set_uri(&mut self, v: ::std::string::String) {
            self.uri = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_uri(&mut self) -> &mut ::std::string::String {
            &mut self.uri
        }

        // Take field
        pub fn take_uri(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.uri, ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "format",
                |m: &File| { &m.format },
                |m: &mut File| { &mut m.format },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "uri",
                |m: &File| { &m.uri },
                |m: &mut File| { &mut m.uri },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<File>(
                "Dataset.File",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for File {
        const NAME: &'static str = "File";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.format = is.read_string()?;
                    },
                    18 => {
                        self.uri = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.format.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.format);
            }
            if !self.uri.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.uri);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.format.is_empty() {
                os.write_string(1, &self.format)?;
            }
            if !self.uri.is_empty() {
                os.write_string(2, &self.uri)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> File {
            File::new()
        }

        fn clear(&mut self) {
            self.format.clear();
            self.uri.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static File {
            static instance: File = File {
                format: ::std::string::String::new(),
                uri: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for File {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Dataset.File").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for File {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for File {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Dataset.Files)
    pub struct Files {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Files.format)
        pub format: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Files.uri_pattern)
        pub uri_pattern: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Dataset.Files.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Files {
        fn default() -> &'a Files {
            <Files as ::protobuf::Message>::default_instance()
        }
    }

    impl Files {
        pub fn new() -> Files {
            ::std::default::Default::default()
        }

        // string format = 1;

        pub fn format(&self) -> &str {
            &self.format
        }

        pub fn clear_format(&mut self) {
            self.format.clear();
        }

        // Param is passed by value, moved
        pub fn set_format(&mut self, v: ::std::string::String) {
            self.format = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_format(&mut self) -> &mut ::std::string::String {
            &mut self.format
        }

        // Take field
        pub fn take_format(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.format, ::std::string::String::new())
        }

        // string uri_pattern = 2;

        pub fn uri_pattern(&self) -> &str {
            &self.uri_pattern
        }

        pub fn clear_uri_pattern(&mut self) {
            self.uri_pattern.clear();
        }

        // Param is passed by value, moved
        pub fn set_uri_pattern(&mut self, v: ::std::string::String) {
            self.uri_pattern = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_uri_pattern(&mut self) -> &mut ::std::string::String {
            &mut self.uri_pattern
        }

        // Take field
        pub fn take_uri_pattern(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.uri_pattern, ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "format",
                |m: &Files| { &m.format },
                |m: &mut Files| { &mut m.format },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "uri_pattern",
                |m: &Files| { &m.uri_pattern },
                |m: &mut Files| { &mut m.uri_pattern },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Files>(
                "Dataset.Files",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Files {
        const NAME: &'static str = "Files";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.format = is.read_string()?;
                    },
                    18 => {
                        self.uri_pattern = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.format.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.format);
            }
            if !self.uri_pattern.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.uri_pattern);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.format.is_empty() {
                os.write_string(1, &self.format)?;
            }
            if !self.uri_pattern.is_empty() {
                os.write_string(2, &self.uri_pattern)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Files {
            Files::new()
        }

        fn clear(&mut self) {
            self.format.clear();
            self.uri_pattern.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Files {
            static instance: Files = Files {
                format: ::std::string::String::new(),
                uri_pattern: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Files {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Dataset.Files").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Files {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Files {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Dataset.Archive)
    pub struct Archive {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Archive.format)
        pub format: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Archive.archive_format)
        pub archive_format: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Archive.uri)
        pub uri: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Dataset.Archive.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Archive {
        fn default() -> &'a Archive {
            <Archive as ::protobuf::Message>::default_instance()
        }
    }

    impl Archive {
        pub fn new() -> Archive {
            ::std::default::Default::default()
        }

        // string format = 1;

        pub fn format(&self) -> &str {
            &self.format
        }

        pub fn clear_format(&mut self) {
            self.format.clear();
        }

        // Param is passed by value, moved
        pub fn set_format(&mut self, v: ::std::string::String) {
            self.format = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_format(&mut self) -> &mut ::std::string::String {
            &mut self.format
        }

        // Take field
        pub fn take_format(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.format, ::std::string::String::new())
        }

        // string archive_format = 2;

        pub fn archive_format(&self) -> &str {
            &self.archive_format
        }

        pub fn clear_archive_format(&mut self) {
            self.archive_format.clear();
        }

        // Param is passed by value, moved
        pub fn set_archive_format(&mut self, v: ::std::string::String) {
            self.archive_format = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_archive_format(&mut self) -> &mut ::std::string::String {
            &mut self.archive_format
        }

        // Take field
        pub fn take_archive_format(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.archive_format, ::std::string::String::new())
        }

        // string uri = 3;

        pub fn uri(&self) -> &str {
            &self.uri
        }

        pub fn clear_uri(&mut self) {
            self.uri.clear();
        }

        // Param is passed by value, moved
        pub fn set_uri(&mut self, v: ::std::string::String) {
            self.uri = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_uri(&mut self) -> &mut ::std::string::String {
            &mut self.uri
        }

        // Take field
        pub fn take_uri(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.uri, ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "format",
                |m: &Archive| { &m.format },
                |m: &mut Archive| { &mut m.format },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "archive_format",
                |m: &Archive| { &m.archive_format },
                |m: &mut Archive| { &mut m.archive_format },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "uri",
                |m: &Archive| { &m.uri },
                |m: &mut Archive| { &mut m.uri },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Archive>(
                "Dataset.Archive",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Archive {
        const NAME: &'static str = "Archive";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.format = is.read_string()?;
                    },
                    18 => {
                        self.archive_format = is.read_string()?;
                    },
                    26 => {
                        self.uri = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.format.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.format);
            }
            if !self.archive_format.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.archive_format);
            }
            if !self.uri.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.uri);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.format.is_empty() {
                os.write_string(1, &self.format)?;
            }
            if !self.archive_format.is_empty() {
                os.write_string(2, &self.archive_format)?;
            }
            if !self.uri.is_empty() {
                os.write_string(3, &self.uri)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Archive {
            Archive::new()
        }

        fn clear(&mut self) {
            self.format.clear();
            self.archive_format.clear();
            self.uri.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Archive {
            static instance: Archive = Archive {
                format: ::std::string::String::new(),
                archive_format: ::std::string::String::new(),
                uri: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Archive {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Dataset.Archive").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Archive {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Archive {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Dataset.Sql)
    pub struct Sql {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Sql.uri)
        pub uri: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Sql.tables)
        pub tables: ::std::vec::Vec<sql::Table>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Dataset.Sql.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Sql {
        fn default() -> &'a Sql {
            <Sql as ::protobuf::Message>::default_instance()
        }
    }

    impl Sql {
        pub fn new() -> Sql {
            ::std::default::Default::default()
        }

        // string uri = 1;

        pub fn uri(&self) -> &str {
            &self.uri
        }

        pub fn clear_uri(&mut self) {
            self.uri.clear();
        }

        // Param is passed by value, moved
        pub fn set_uri(&mut self, v: ::std::string::String) {
            self.uri = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_uri(&mut self) -> &mut ::std::string::String {
            &mut self.uri
        }

        // Take field
        pub fn take_uri(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.uri, ::std::string::String::new())
        }

        // repeated .sarus_data_spec.Dataset.Sql.Table tables = 2;

        pub fn tables(&self) -> &[sql::Table] {
            &self.tables
        }

        pub fn clear_tables(&mut self) {
            self.tables.clear();
        }

        // Param is passed by value, moved
        pub fn set_tables(&mut self, v: ::std::vec::Vec<sql::Table>) {
            self.tables = v;
        }

        // Mutable pointer to the field.
        pub fn mut_tables(&mut self) -> &mut ::std::vec::Vec<sql::Table> {
            &mut self.tables
        }

        // Take field
        pub fn take_tables(&mut self) -> ::std::vec::Vec<sql::Table> {
            ::std::mem::replace(&mut self.tables, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "uri",
                |m: &Sql| { &m.uri },
                |m: &mut Sql| { &mut m.uri },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "tables",
                |m: &Sql| { &m.tables },
                |m: &mut Sql| { &mut m.tables },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sql>(
                "Dataset.Sql",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Sql {
        const NAME: &'static str = "Sql";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.uri = is.read_string()?;
                    },
                    18 => {
                        self.tables.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.uri.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.uri);
            }
            for value in &self.tables {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.uri.is_empty() {
                os.write_string(1, &self.uri)?;
            }
            for v in &self.tables {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Sql {
            Sql::new()
        }

        fn clear(&mut self) {
            self.uri.clear();
            self.tables.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Sql {
            static instance: Sql = Sql {
                uri: ::std::string::String::new(),
                tables: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Sql {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Dataset.Sql").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Sql {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Sql {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Sql`
    pub mod sql {
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:sarus_data_spec.Dataset.Sql.Table)
        pub struct Table {
            // message fields
            // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Sql.Table.schema)
            pub schema: ::std::string::String,
            // @@protoc_insertion_point(field:sarus_data_spec.Dataset.Sql.Table.table)
            pub table: ::std::string::String,
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Dataset.Sql.Table.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Table {
            fn default() -> &'a Table {
                <Table as ::protobuf::Message>::default_instance()
            }
        }

        impl Table {
            pub fn new() -> Table {
                ::std::default::Default::default()
            }

            // string schema = 1;

            pub fn schema(&self) -> &str {
                &self.schema
            }

            pub fn clear_schema(&mut self) {
                self.schema.clear();
            }

            // Param is passed by value, moved
            pub fn set_schema(&mut self, v: ::std::string::String) {
                self.schema = v;
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_schema(&mut self) -> &mut ::std::string::String {
                &mut self.schema
            }

            // Take field
            pub fn take_schema(&mut self) -> ::std::string::String {
                ::std::mem::replace(&mut self.schema, ::std::string::String::new())
            }

            // string table = 2;

            pub fn table(&self) -> &str {
                &self.table
            }

            pub fn clear_table(&mut self) {
                self.table.clear();
            }

            // Param is passed by value, moved
            pub fn set_table(&mut self, v: ::std::string::String) {
                self.table = v;
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_table(&mut self) -> &mut ::std::string::String {
                &mut self.table
            }

            // Take field
            pub fn take_table(&mut self) -> ::std::string::String {
                ::std::mem::replace(&mut self.table, ::std::string::String::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "schema",
                    |m: &Table| { &m.schema },
                    |m: &mut Table| { &mut m.schema },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "table",
                    |m: &Table| { &m.table },
                    |m: &mut Table| { &mut m.table },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Table>(
                    "Dataset.Sql.Table",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Table {
            const NAME: &'static str = "Table";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.schema = is.read_string()?;
                        },
                        18 => {
                            self.table = is.read_string()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.schema.is_empty() {
                    my_size += ::protobuf::rt::string_size(1, &self.schema);
                }
                if !self.table.is_empty() {
                    my_size += ::protobuf::rt::string_size(2, &self.table);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.schema.is_empty() {
                    os.write_string(1, &self.schema)?;
                }
                if !self.table.is_empty() {
                    os.write_string(2, &self.table)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Table {
                Table::new()
            }

            fn clear(&mut self) {
                self.schema.clear();
                self.table.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Table {
                static instance: Table = Table {
                    schema: ::std::string::String::new(),
                    table: ::std::string::String::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Table {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Dataset.Sql.Table").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Table {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Table {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&sarus_data_spec/protobuf/dataset.proto\x12\x0fsarus_data_spec\"\x86\t\
    \n\x07Dataset\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuid\x12\x12\n\
    \x04name\x18\x02\x20\x01(\tR\x04name\x12\x10\n\x03doc\x18\x03\x20\x01(\t\
    R\x03doc\x121\n\x04spec\x18\x04\x20\x01(\x0b2\x1d.sarus_data_spec.Datase\
    t.SpecR\x04spec\x12H\n\nproperties\x18\x05\x20\x03(\x0b2(.sarus_data_spe\
    c.Dataset.PropertiesEntryR\nproperties\x1a=\n\x0fPropertiesEntry\x12\x10\
    \n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\
    \tR\x05value:\x028\x01\x1a\xb5\x02\n\x04Spec\x12H\n\x0btransformed\x18\
    \x01\x20\x01(\x0b2$.sarus_data_spec.Dataset.TransformedH\0R\x0btransform\
    ed\x123\n\x04file\x18\x02\x20\x01(\x0b2\x1d.sarus_data_spec.Dataset.File\
    H\0R\x04file\x126\n\x05files\x18\x03\x20\x01(\x0b2\x1e.sarus_data_spec.D\
    ataset.FilesH\0R\x05files\x12<\n\x07archive\x18\x04\x20\x01(\x0b2\x20.sa\
    rus_data_spec.Dataset.ArchiveH\0R\x07archive\x120\n\x03sql\x18\x05\x20\
    \x01(\x0b2\x1c.sarus_data_spec.Dataset.SqlH\0R\x03sqlB\x06\n\x04spec\x1a\
    \xef\x01\n\x0bTransformed\x12\x1c\n\ttransform\x18\x01\x20\x01(\tR\ttran\
    sform\x12\x1c\n\targuments\x18\x02\x20\x03(\tR\targuments\x12a\n\x0fname\
    d_arguments\x18\x03\x20\x03(\x0b28.sarus_data_spec.Dataset.Transformed.N\
    amedArgumentsEntryR\x0enamedArguments\x1aA\n\x13NamedArgumentsEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\
    \x01(\tR\x05value:\x028\x01\x1a0\n\x04File\x12\x16\n\x06format\x18\x01\
    \x20\x01(\tR\x06format\x12\x10\n\x03uri\x18\x02\x20\x01(\tR\x03uri\x1a@\
    \n\x05Files\x12\x16\n\x06format\x18\x01\x20\x01(\tR\x06format\x12\x1f\n\
    \x0buri_pattern\x18\x02\x20\x01(\tR\nuriPattern\x1aZ\n\x07Archive\x12\
    \x16\n\x06format\x18\x01\x20\x01(\tR\x06format\x12%\n\x0earchive_format\
    \x18\x02\x20\x01(\tR\rarchiveFormat\x12\x10\n\x03uri\x18\x03\x20\x01(\tR\
    \x03uri\x1a\x8a\x01\n\x03Sql\x12\x10\n\x03uri\x18\x01\x20\x01(\tR\x03uri\
    \x12:\n\x06tables\x18\x02\x20\x03(\x0b2\".sarus_data_spec.Dataset.Sql.Ta\
    bleR\x06tables\x1a5\n\x05Table\x12\x16\n\x06schema\x18\x01\x20\x01(\tR\
    \x06schema\x12\x14\n\x05table\x18\x02\x20\x01(\tR\x05tableb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(Dataset::generated_message_descriptor_data());
            messages.push(dataset::Spec::generated_message_descriptor_data());
            messages.push(dataset::Transformed::generated_message_descriptor_data());
            messages.push(dataset::File::generated_message_descriptor_data());
            messages.push(dataset::Files::generated_message_descriptor_data());
            messages.push(dataset::Archive::generated_message_descriptor_data());
            messages.push(dataset::Sql::generated_message_descriptor_data());
            messages.push(dataset::sql::Table::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
