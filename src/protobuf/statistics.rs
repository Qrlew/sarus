// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sarus_data_spec/protobuf/statistics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sarus_data_spec.Statistics)
pub struct Statistics {
    // message fields
    // @@protoc_insertion_point(field:sarus_data_spec.Statistics.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Statistics.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // message oneof groups
    pub statistics: ::std::option::Option<statistics::Statistics>,
    // special fields
    // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Statistics {
    fn default() -> &'a Statistics {
        <Statistics as ::protobuf::Message>::default_instance()
    }
}

impl Statistics {
    pub fn new() -> Statistics {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn name(&self) -> &str {
        &self.name
    }

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .sarus_data_spec.Statistics.Null null = 3;

    pub fn null(&self) -> &statistics::Null {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Null(ref v)) => v,
            _ => <statistics::Null as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_null(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_null(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Null(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_null(&mut self, v: statistics::Null) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Null(v))
    }

    // Mutable pointer to the field.
    pub fn mut_null(&mut self) -> &mut statistics::Null {
        if let ::std::option::Option::Some(statistics::Statistics::Null(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Null(statistics::Null::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Null(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_null(&mut self) -> statistics::Null {
        if self.has_null() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Null(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Null::new()
        }
    }

    // .sarus_data_spec.Statistics.Unit unit = 4;

    pub fn unit(&self) -> &statistics::Unit {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Unit(ref v)) => v,
            _ => <statistics::Unit as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_unit(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_unit(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Unit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: statistics::Unit) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Unit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unit(&mut self) -> &mut statistics::Unit {
        if let ::std::option::Option::Some(statistics::Statistics::Unit(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Unit(statistics::Unit::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Unit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unit(&mut self) -> statistics::Unit {
        if self.has_unit() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Unit(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Unit::new()
        }
    }

    // .sarus_data_spec.Statistics.Boolean boolean = 5;

    pub fn boolean(&self) -> &statistics::Boolean {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Boolean(ref v)) => v,
            _ => <statistics::Boolean as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_boolean(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_boolean(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Boolean(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_boolean(&mut self, v: statistics::Boolean) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Boolean(v))
    }

    // Mutable pointer to the field.
    pub fn mut_boolean(&mut self) -> &mut statistics::Boolean {
        if let ::std::option::Option::Some(statistics::Statistics::Boolean(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Boolean(statistics::Boolean::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Boolean(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_boolean(&mut self) -> statistics::Boolean {
        if self.has_boolean() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Boolean(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Boolean::new()
        }
    }

    // .sarus_data_spec.Statistics.Integer integer = 6;

    pub fn integer(&self) -> &statistics::Integer {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Integer(ref v)) => v,
            _ => <statistics::Integer as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_integer(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_integer(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Integer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_integer(&mut self, v: statistics::Integer) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Integer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_integer(&mut self) -> &mut statistics::Integer {
        if let ::std::option::Option::Some(statistics::Statistics::Integer(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Integer(statistics::Integer::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Integer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_integer(&mut self) -> statistics::Integer {
        if self.has_integer() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Integer(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Integer::new()
        }
    }

    // .sarus_data_spec.Statistics.Enum enum = 7;

    pub fn enum_(&self) -> &statistics::Enum {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Enum(ref v)) => v,
            _ => <statistics::Enum as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_enum_(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_enum(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Enum(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_enum(&mut self, v: statistics::Enum) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Enum(v))
    }

    // Mutable pointer to the field.
    pub fn mut_enum(&mut self) -> &mut statistics::Enum {
        if let ::std::option::Option::Some(statistics::Statistics::Enum(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Enum(statistics::Enum::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Enum(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_enum_(&mut self) -> statistics::Enum {
        if self.has_enum() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Enum(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Enum::new()
        }
    }

    // .sarus_data_spec.Statistics.Float float = 8;

    pub fn float(&self) -> &statistics::Float {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Float(ref v)) => v,
            _ => <statistics::Float as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_float(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_float(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Float(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_float(&mut self, v: statistics::Float) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Float(v))
    }

    // Mutable pointer to the field.
    pub fn mut_float(&mut self) -> &mut statistics::Float {
        if let ::std::option::Option::Some(statistics::Statistics::Float(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Float(statistics::Float::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Float(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_float(&mut self) -> statistics::Float {
        if self.has_float() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Float(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Float::new()
        }
    }

    // .sarus_data_spec.Statistics.Text text = 9;

    pub fn text(&self) -> &statistics::Text {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Text(ref v)) => v,
            _ => <statistics::Text as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_text(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Text(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: statistics::Text) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Text(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text(&mut self) -> &mut statistics::Text {
        if let ::std::option::Option::Some(statistics::Statistics::Text(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Text(statistics::Text::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Text(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text(&mut self) -> statistics::Text {
        if self.has_text() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Text(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Text::new()
        }
    }

    // .sarus_data_spec.Statistics.Bytes bytes = 10;

    pub fn bytes(&self) -> &statistics::Bytes {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Bytes(ref v)) => v,
            _ => <statistics::Bytes as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bytes(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_bytes(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Bytes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: statistics::Bytes) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Bytes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bytes(&mut self) -> &mut statistics::Bytes {
        if let ::std::option::Option::Some(statistics::Statistics::Bytes(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Bytes(statistics::Bytes::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Bytes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bytes(&mut self) -> statistics::Bytes {
        if self.has_bytes() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Bytes(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Bytes::new()
        }
    }

    // .sarus_data_spec.Statistics.Struct struct = 11;

    pub fn struct_(&self) -> &statistics::Struct {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Struct(ref v)) => v,
            _ => <statistics::Struct as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_struct_(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_struct(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Struct(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_struct(&mut self, v: statistics::Struct) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Struct(v))
    }

    // Mutable pointer to the field.
    pub fn mut_struct(&mut self) -> &mut statistics::Struct {
        if let ::std::option::Option::Some(statistics::Statistics::Struct(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Struct(statistics::Struct::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Struct(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_struct_(&mut self) -> statistics::Struct {
        if self.has_struct() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Struct(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Struct::new()
        }
    }

    // .sarus_data_spec.Statistics.Union union = 12;

    pub fn union(&self) -> &statistics::Union {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Union(ref v)) => v,
            _ => <statistics::Union as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_union(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_union(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Union(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_union(&mut self, v: statistics::Union) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Union(v))
    }

    // Mutable pointer to the field.
    pub fn mut_union(&mut self) -> &mut statistics::Union {
        if let ::std::option::Option::Some(statistics::Statistics::Union(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Union(statistics::Union::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Union(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_union(&mut self) -> statistics::Union {
        if self.has_union() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Union(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Union::new()
        }
    }

    // .sarus_data_spec.Statistics.Optional optional = 13;

    pub fn optional(&self) -> &statistics::Optional {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Optional(ref v)) => v,
            _ => <statistics::Optional as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_optional(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_optional(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Optional(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_optional(&mut self, v: statistics::Optional) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Optional(v))
    }

    // Mutable pointer to the field.
    pub fn mut_optional(&mut self) -> &mut statistics::Optional {
        if let ::std::option::Option::Some(statistics::Statistics::Optional(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Optional(statistics::Optional::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Optional(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_optional(&mut self) -> statistics::Optional {
        if self.has_optional() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Optional(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Optional::new()
        }
    }

    // .sarus_data_spec.Statistics.List list = 14;

    pub fn list(&self) -> &statistics::List {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::List(ref v)) => v,
            _ => <statistics::List as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_list(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_list(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::List(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list(&mut self, v: statistics::List) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::List(v))
    }

    // Mutable pointer to the field.
    pub fn mut_list(&mut self) -> &mut statistics::List {
        if let ::std::option::Option::Some(statistics::Statistics::List(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::List(statistics::List::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::List(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list(&mut self) -> statistics::List {
        if self.has_list() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::List(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::List::new()
        }
    }

    // .sarus_data_spec.Statistics.Array array = 15;

    pub fn array(&self) -> &statistics::Array {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Array(ref v)) => v,
            _ => <statistics::Array as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_array(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_array(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Array(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_array(&mut self, v: statistics::Array) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Array(v))
    }

    // Mutable pointer to the field.
    pub fn mut_array(&mut self) -> &mut statistics::Array {
        if let ::std::option::Option::Some(statistics::Statistics::Array(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Array(statistics::Array::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Array(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_array(&mut self) -> statistics::Array {
        if self.has_array() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Array(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Array::new()
        }
    }

    // .sarus_data_spec.Statistics.Datetime datetime = 16;

    pub fn datetime(&self) -> &statistics::Datetime {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Datetime(ref v)) => v,
            _ => <statistics::Datetime as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_datetime(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_datetime(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Datetime(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_datetime(&mut self, v: statistics::Datetime) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Datetime(v))
    }

    // Mutable pointer to the field.
    pub fn mut_datetime(&mut self) -> &mut statistics::Datetime {
        if let ::std::option::Option::Some(statistics::Statistics::Datetime(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Datetime(statistics::Datetime::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Datetime(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_datetime(&mut self) -> statistics::Datetime {
        if self.has_datetime() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Datetime(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Datetime::new()
        }
    }

    // .sarus_data_spec.Statistics.Id id = 17;

    pub fn id(&self) -> &statistics::Id {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Id(ref v)) => v,
            _ => <statistics::Id as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_id(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: statistics::Id) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_id(&mut self) -> &mut statistics::Id {
        if let ::std::option::Option::Some(statistics::Statistics::Id(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Id(statistics::Id::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_id(&mut self) -> statistics::Id {
        if self.has_id() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Id(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Id::new()
        }
    }

    // .sarus_data_spec.Statistics.Constrained constrained = 18;

    pub fn constrained(&self) -> &statistics::Constrained {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Constrained(ref v)) => v,
            _ => <statistics::Constrained as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_constrained(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_constrained(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Constrained(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_constrained(&mut self, v: statistics::Constrained) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Constrained(v))
    }

    // Mutable pointer to the field.
    pub fn mut_constrained(&mut self) -> &mut statistics::Constrained {
        if let ::std::option::Option::Some(statistics::Statistics::Constrained(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Constrained(statistics::Constrained::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Constrained(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_constrained(&mut self) -> statistics::Constrained {
        if self.has_constrained() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Constrained(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Constrained::new()
        }
    }

    // .sarus_data_spec.Statistics.Date date = 19;

    pub fn date(&self) -> &statistics::Date {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Date(ref v)) => v,
            _ => <statistics::Date as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_date(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_date(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Date(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: statistics::Date) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Date(v))
    }

    // Mutable pointer to the field.
    pub fn mut_date(&mut self) -> &mut statistics::Date {
        if let ::std::option::Option::Some(statistics::Statistics::Date(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Date(statistics::Date::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Date(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_date(&mut self) -> statistics::Date {
        if self.has_date() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Date(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Date::new()
        }
    }

    // .sarus_data_spec.Statistics.Time time = 20;

    pub fn time(&self) -> &statistics::Time {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Time(ref v)) => v,
            _ => <statistics::Time as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_time(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Time(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: statistics::Time) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Time(v))
    }

    // Mutable pointer to the field.
    pub fn mut_time(&mut self) -> &mut statistics::Time {
        if let ::std::option::Option::Some(statistics::Statistics::Time(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Time(statistics::Time::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Time(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_time(&mut self) -> statistics::Time {
        if self.has_time() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Time(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Time::new()
        }
    }

    // .sarus_data_spec.Statistics.Duration duration = 21;

    pub fn duration(&self) -> &statistics::Duration {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Duration(ref v)) => v,
            _ => <statistics::Duration as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_duration(&mut self) {
        self.statistics = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Duration(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: statistics::Duration) {
        self.statistics = ::std::option::Option::Some(statistics::Statistics::Duration(v))
    }

    // Mutable pointer to the field.
    pub fn mut_duration(&mut self) -> &mut statistics::Duration {
        if let ::std::option::Option::Some(statistics::Statistics::Duration(_)) = self.statistics {
        } else {
            self.statistics = ::std::option::Option::Some(statistics::Statistics::Duration(statistics::Duration::new()));
        }
        match self.statistics {
            ::std::option::Option::Some(statistics::Statistics::Duration(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_duration(&mut self) -> statistics::Duration {
        if self.has_duration() {
            match self.statistics.take() {
                ::std::option::Option::Some(statistics::Statistics::Duration(v)) => v,
                _ => panic!(),
            }
        } else {
            statistics::Duration::new()
        }
    }

    // repeated .sarus_data_spec.Statistics.PropertiesEntry properties = 2;

    pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.properties
    }

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(21);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Statistics| { &m.name },
            |m: &mut Statistics| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Null>(
            "null",
            Statistics::has_null,
            Statistics::null,
            Statistics::mut_null,
            Statistics::set_null,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Unit>(
            "unit",
            Statistics::has_unit,
            Statistics::unit,
            Statistics::mut_unit,
            Statistics::set_unit,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Boolean>(
            "boolean",
            Statistics::has_boolean,
            Statistics::boolean,
            Statistics::mut_boolean,
            Statistics::set_boolean,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Integer>(
            "integer",
            Statistics::has_integer,
            Statistics::integer,
            Statistics::mut_integer,
            Statistics::set_integer,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Enum>(
            "enum",
            Statistics::has_enum,
            Statistics::enum_,
            Statistics::mut_enum,
            Statistics::set_enum,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Float>(
            "float",
            Statistics::has_float,
            Statistics::float,
            Statistics::mut_float,
            Statistics::set_float,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Text>(
            "text",
            Statistics::has_text,
            Statistics::text,
            Statistics::mut_text,
            Statistics::set_text,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Bytes>(
            "bytes",
            Statistics::has_bytes,
            Statistics::bytes,
            Statistics::mut_bytes,
            Statistics::set_bytes,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Struct>(
            "struct",
            Statistics::has_struct,
            Statistics::struct_,
            Statistics::mut_struct,
            Statistics::set_struct,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Union>(
            "union",
            Statistics::has_union,
            Statistics::union,
            Statistics::mut_union,
            Statistics::set_union,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Optional>(
            "optional",
            Statistics::has_optional,
            Statistics::optional,
            Statistics::mut_optional,
            Statistics::set_optional,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::List>(
            "list",
            Statistics::has_list,
            Statistics::list,
            Statistics::mut_list,
            Statistics::set_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Array>(
            "array",
            Statistics::has_array,
            Statistics::array,
            Statistics::mut_array,
            Statistics::set_array,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Datetime>(
            "datetime",
            Statistics::has_datetime,
            Statistics::datetime,
            Statistics::mut_datetime,
            Statistics::set_datetime,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Id>(
            "id",
            Statistics::has_id,
            Statistics::id,
            Statistics::mut_id,
            Statistics::set_id,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Constrained>(
            "constrained",
            Statistics::has_constrained,
            Statistics::constrained,
            Statistics::mut_constrained,
            Statistics::set_constrained,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Date>(
            "date",
            Statistics::has_date,
            Statistics::date,
            Statistics::mut_date,
            Statistics::set_date,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Time>(
            "time",
            Statistics::has_time,
            Statistics::time,
            Statistics::mut_time,
            Statistics::set_time,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, statistics::Duration>(
            "duration",
            Statistics::has_duration,
            Statistics::duration,
            Statistics::mut_duration,
            Statistics::set_duration,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &Statistics| { &m.properties },
            |m: &mut Statistics| { &mut m.properties },
        ));
        oneofs.push(statistics::Statistics::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Statistics>(
            "Statistics",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Statistics {
    const NAME: &'static str = "Statistics";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Null(is.read_message()?));
                },
                34 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Unit(is.read_message()?));
                },
                42 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Boolean(is.read_message()?));
                },
                50 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Integer(is.read_message()?));
                },
                58 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Enum(is.read_message()?));
                },
                66 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Float(is.read_message()?));
                },
                74 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Text(is.read_message()?));
                },
                82 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Bytes(is.read_message()?));
                },
                90 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Struct(is.read_message()?));
                },
                98 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Union(is.read_message()?));
                },
                106 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Optional(is.read_message()?));
                },
                114 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::List(is.read_message()?));
                },
                122 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Array(is.read_message()?));
                },
                130 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Datetime(is.read_message()?));
                },
                138 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Id(is.read_message()?));
                },
                146 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Constrained(is.read_message()?));
                },
                154 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Date(is.read_message()?));
                },
                162 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Time(is.read_message()?));
                },
                170 => {
                    self.statistics = ::std::option::Option::Some(statistics::Statistics::Duration(is.read_message()?));
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let ::std::option::Option::Some(ref v) = self.statistics {
            match v {
                &statistics::Statistics::Null(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Unit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Boolean(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Integer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Enum(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Float(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Text(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Bytes(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Struct(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Union(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Optional(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::List(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Array(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Datetime(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Id(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Constrained(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Date(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Time(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &statistics::Statistics::Duration(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.statistics {
            match v {
                &statistics::Statistics::Null(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &statistics::Statistics::Unit(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &statistics::Statistics::Boolean(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &statistics::Statistics::Integer(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &statistics::Statistics::Enum(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &statistics::Statistics::Float(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &statistics::Statistics::Text(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &statistics::Statistics::Bytes(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &statistics::Statistics::Struct(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &statistics::Statistics::Union(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &statistics::Statistics::Optional(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &statistics::Statistics::List(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &statistics::Statistics::Array(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &statistics::Statistics::Datetime(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
                },
                &statistics::Statistics::Id(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
                },
                &statistics::Statistics::Constrained(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
                },
                &statistics::Statistics::Date(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
                },
                &statistics::Statistics::Time(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
                },
                &statistics::Statistics::Duration(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Statistics {
        Statistics::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.statistics = ::std::option::Option::None;
        self.properties.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Statistics {
        static instance: ::protobuf::rt::Lazy<Statistics> = ::protobuf::rt::Lazy::new();
        instance.get(Statistics::new)
    }
}

impl ::protobuf::MessageFull for Statistics {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Statistics").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Statistics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Statistics {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Statistics`
pub mod statistics {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:sarus_data_spec.Statistics.statistics)
    pub enum Statistics {
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.null)
        Null(Null),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.unit)
        Unit(Unit),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.boolean)
        Boolean(Boolean),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.integer)
        Integer(Integer),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.enum)
        Enum(Enum),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.float)
        Float(Float),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.text)
        Text(Text),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.bytes)
        Bytes(Bytes),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.struct)
        Struct(Struct),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.union)
        Union(Union),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.optional)
        Optional(Optional),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.list)
        List(List),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.array)
        Array(Array),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.datetime)
        Datetime(Datetime),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.id)
        Id(Id),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.constrained)
        Constrained(Constrained),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.date)
        Date(Date),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.time)
        Time(Time),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Statistics.duration)
        Duration(Duration),
    }

    impl ::protobuf::Oneof for Statistics {
    }

    impl ::protobuf::OneofFull for Statistics {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Statistics as ::protobuf::MessageFull>::descriptor().oneof_by_name("statistics").unwrap()).clone()
        }
    }

    impl Statistics {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Statistics>("statistics")
        }
    }
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Null)
    pub struct Null {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Null.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Null.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Null.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Null {
        fn default() -> &'a Null {
            <Null as ::protobuf::Message>::default_instance()
        }
    }

    impl Null {
        pub fn new() -> Null {
            ::std::default::Default::default()
        }

        // int64 size = 1;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 2;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Null| { &m.size },
                |m: &mut Null| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Null| { &m.multiplicity },
                |m: &mut Null| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Null>(
                "Statistics.Null",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Null {
        const NAME: &'static str = "Null";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.size = is.read_int64()?;
                    },
                    17 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(1, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.size != 0 {
                os.write_int64(1, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(2, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Null {
            Null::new()
        }

        fn clear(&mut self) {
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Null {
            static instance: Null = Null {
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Null {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Null").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Null {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Null {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Unit)
    pub struct Unit {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Unit.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Unit.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Unit.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Unit {
        fn default() -> &'a Unit {
            <Unit as ::protobuf::Message>::default_instance()
        }
    }

    impl Unit {
        pub fn new() -> Unit {
            ::std::default::Default::default()
        }

        // int64 size = 1;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 2;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Unit| { &m.size },
                |m: &mut Unit| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Unit| { &m.multiplicity },
                |m: &mut Unit| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Unit>(
                "Statistics.Unit",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Unit {
        const NAME: &'static str = "Unit";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.size = is.read_int64()?;
                    },
                    17 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(1, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.size != 0 {
                os.write_int64(1, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(2, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Unit {
            Unit::new()
        }

        fn clear(&mut self) {
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Unit {
            static instance: Unit = Unit {
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Unit {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Unit").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Unit {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Unit {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Boolean)
    pub struct Boolean {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Boolean.distribution)
        pub distribution: ::protobuf::MessageField<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Boolean.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Boolean.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Boolean.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Boolean {
        fn default() -> &'a Boolean {
            <Boolean as ::protobuf::Message>::default_instance()
        }
    }

    impl Boolean {
        pub fn new() -> Boolean {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Distribution distribution = 1;

        pub fn distribution(&self) -> &super::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::Distribution {
            self.distribution.take().unwrap_or_else(|| super::Distribution::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 3;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Distribution>(
                "distribution",
                |m: &Boolean| { &m.distribution },
                |m: &mut Boolean| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Boolean| { &m.size },
                |m: &mut Boolean| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Boolean| { &m.multiplicity },
                |m: &mut Boolean| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Boolean>(
                "Statistics.Boolean",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Boolean {
        const NAME: &'static str = "Boolean";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    25 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(3, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Boolean {
            Boolean::new()
        }

        fn clear(&mut self) {
            self.distribution.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Boolean {
            static instance: Boolean = Boolean {
                distribution: ::protobuf::MessageField::none(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Boolean {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Boolean").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Boolean {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Boolean {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Id)
    pub struct Id {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Id.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Id.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Id.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Id {
        fn default() -> &'a Id {
            <Id as ::protobuf::Message>::default_instance()
        }
    }

    impl Id {
        pub fn new() -> Id {
            ::std::default::Default::default()
        }

        // int64 size = 1;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 2;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Id| { &m.size },
                |m: &mut Id| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Id| { &m.multiplicity },
                |m: &mut Id| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Id>(
                "Statistics.Id",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Id {
        const NAME: &'static str = "Id";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.size = is.read_int64()?;
                    },
                    17 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(1, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.size != 0 {
                os.write_int64(1, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(2, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Id {
            Id::new()
        }

        fn clear(&mut self) {
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Id {
            static instance: Id = Id {
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Id {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Id").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Id {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Id {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Integer)
    pub struct Integer {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Integer.distribution)
        pub distribution: ::protobuf::MessageField<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Integer.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Integer.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Integer.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Integer {
        fn default() -> &'a Integer {
            <Integer as ::protobuf::Message>::default_instance()
        }
    }

    impl Integer {
        pub fn new() -> Integer {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Distribution distribution = 1;

        pub fn distribution(&self) -> &super::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::Distribution {
            self.distribution.take().unwrap_or_else(|| super::Distribution::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 3;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Distribution>(
                "distribution",
                |m: &Integer| { &m.distribution },
                |m: &mut Integer| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Integer| { &m.size },
                |m: &mut Integer| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Integer| { &m.multiplicity },
                |m: &mut Integer| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Integer>(
                "Statistics.Integer",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Integer {
        const NAME: &'static str = "Integer";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    25 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(3, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Integer {
            Integer::new()
        }

        fn clear(&mut self) {
            self.distribution.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Integer {
            static instance: Integer = Integer {
                distribution: ::protobuf::MessageField::none(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Integer {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Integer").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Integer {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Integer {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Enum)
    pub struct Enum {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Enum.distribution)
        pub distribution: ::protobuf::MessageField<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Enum.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Enum.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Enum.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Enum {
        fn default() -> &'a Enum {
            <Enum as ::protobuf::Message>::default_instance()
        }
    }

    impl Enum {
        pub fn new() -> Enum {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Distribution distribution = 1;

        pub fn distribution(&self) -> &super::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::Distribution {
            self.distribution.take().unwrap_or_else(|| super::Distribution::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 3;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Distribution>(
                "distribution",
                |m: &Enum| { &m.distribution },
                |m: &mut Enum| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Enum| { &m.size },
                |m: &mut Enum| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Enum| { &m.multiplicity },
                |m: &mut Enum| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Enum>(
                "Statistics.Enum",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Enum {
        const NAME: &'static str = "Enum";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    25 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(3, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Enum {
            Enum::new()
        }

        fn clear(&mut self) {
            self.distribution.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Enum {
            static instance: Enum = Enum {
                distribution: ::protobuf::MessageField::none(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Enum {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Enum").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Enum {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Enum {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Float)
    pub struct Float {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Float.distribution)
        pub distribution: ::protobuf::MessageField<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Float.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Float.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Float.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Float {
        fn default() -> &'a Float {
            <Float as ::protobuf::Message>::default_instance()
        }
    }

    impl Float {
        pub fn new() -> Float {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Distribution distribution = 1;

        pub fn distribution(&self) -> &super::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::Distribution {
            self.distribution.take().unwrap_or_else(|| super::Distribution::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 3;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Distribution>(
                "distribution",
                |m: &Float| { &m.distribution },
                |m: &mut Float| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Float| { &m.size },
                |m: &mut Float| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Float| { &m.multiplicity },
                |m: &mut Float| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Float>(
                "Statistics.Float",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Float {
        const NAME: &'static str = "Float";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    25 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(3, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Float {
            Float::new()
        }

        fn clear(&mut self) {
            self.distribution.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Float {
            static instance: Float = Float {
                distribution: ::protobuf::MessageField::none(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Float {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Float").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Float {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Float {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Text)
    pub struct Text {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Text.distribution)
        pub distribution: ::protobuf::MessageField<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Text.example)
        pub example: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Text.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Text.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Text.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Text {
        fn default() -> &'a Text {
            <Text as ::protobuf::Message>::default_instance()
        }
    }

    impl Text {
        pub fn new() -> Text {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Distribution distribution = 1;

        pub fn distribution(&self) -> &super::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::Distribution {
            self.distribution.take().unwrap_or_else(|| super::Distribution::new())
        }

        // string example = 2;

        pub fn example(&self) -> &str {
            &self.example
        }

        pub fn clear_example(&mut self) {
            self.example.clear();
        }

        // Param is passed by value, moved
        pub fn set_example(&mut self, v: ::std::string::String) {
            self.example = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_example(&mut self) -> &mut ::std::string::String {
            &mut self.example
        }

        // Take field
        pub fn take_example(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.example, ::std::string::String::new())
        }

        // int64 size = 3;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 4;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Distribution>(
                "distribution",
                |m: &Text| { &m.distribution },
                |m: &mut Text| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "example",
                |m: &Text| { &m.example },
                |m: &mut Text| { &mut m.example },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Text| { &m.size },
                |m: &mut Text| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Text| { &m.multiplicity },
                |m: &mut Text| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Text>(
                "Statistics.Text",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Text {
        const NAME: &'static str = "Text";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    18 => {
                        self.example = is.read_string()?;
                    },
                    24 => {
                        self.size = is.read_int64()?;
                    },
                    33 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if !self.example.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.example);
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(3, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if !self.example.is_empty() {
                os.write_string(2, &self.example)?;
            }
            if self.size != 0 {
                os.write_int64(3, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(4, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Text {
            Text::new()
        }

        fn clear(&mut self) {
            self.distribution.clear();
            self.example.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Text {
            static instance: Text = Text {
                distribution: ::protobuf::MessageField::none(),
                example: ::std::string::String::new(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Text {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Text").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Text {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Text {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Bytes)
    pub struct Bytes {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Bytes.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Bytes.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Bytes.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Bytes {
        fn default() -> &'a Bytes {
            <Bytes as ::protobuf::Message>::default_instance()
        }
    }

    impl Bytes {
        pub fn new() -> Bytes {
            ::std::default::Default::default()
        }

        // int64 size = 1;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 2;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Bytes| { &m.size },
                |m: &mut Bytes| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Bytes| { &m.multiplicity },
                |m: &mut Bytes| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Bytes>(
                "Statistics.Bytes",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Bytes {
        const NAME: &'static str = "Bytes";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.size = is.read_int64()?;
                    },
                    17 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(1, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.size != 0 {
                os.write_int64(1, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(2, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Bytes {
            Bytes::new()
        }

        fn clear(&mut self) {
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Bytes {
            static instance: Bytes = Bytes {
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Bytes {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Bytes").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Bytes {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Bytes {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Struct)
    pub struct Struct {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Struct.fields)
        pub fields: ::std::vec::Vec<struct_::Field>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Struct.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Struct.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Struct.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Struct.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Struct {
        fn default() -> &'a Struct {
            <Struct as ::protobuf::Message>::default_instance()
        }
    }

    impl Struct {
        pub fn new() -> Struct {
            ::std::default::Default::default()
        }

        // repeated .sarus_data_spec.Statistics.Struct.Field fields = 1;

        pub fn fields(&self) -> &[struct_::Field] {
            &self.fields
        }

        pub fn clear_fields(&mut self) {
            self.fields.clear();
        }

        // Param is passed by value, moved
        pub fn set_fields(&mut self, v: ::std::vec::Vec<struct_::Field>) {
            self.fields = v;
        }

        // Mutable pointer to the field.
        pub fn mut_fields(&mut self) -> &mut ::std::vec::Vec<struct_::Field> {
            &mut self.fields
        }

        // Take field
        pub fn take_fields(&mut self) -> ::std::vec::Vec<struct_::Field> {
            ::std::mem::replace(&mut self.fields, ::std::vec::Vec::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // string name = 3;

        pub fn name(&self) -> &str {
            &self.name
        }

        pub fn clear_name(&mut self) {
            self.name.clear();
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            &mut self.name
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.name, ::std::string::String::new())
        }

        // double multiplicity = 4;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "fields",
                |m: &Struct| { &m.fields },
                |m: &mut Struct| { &mut m.fields },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Struct| { &m.size },
                |m: &mut Struct| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Struct| { &m.name },
                |m: &mut Struct| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Struct| { &m.multiplicity },
                |m: &mut Struct| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Struct>(
                "Statistics.Struct",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Struct {
        const NAME: &'static str = "Struct";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.fields.push(is.read_message()?);
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    26 => {
                        self.name = is.read_string()?;
                    },
                    33 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.fields {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.name);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.fields {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if !self.name.is_empty() {
                os.write_string(3, &self.name)?;
            }
            if self.multiplicity != 0. {
                os.write_double(4, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Struct {
            Struct::new()
        }

        fn clear(&mut self) {
            self.fields.clear();
            self.size = 0;
            self.name.clear();
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Struct {
            static instance: Struct = Struct {
                fields: ::std::vec::Vec::new(),
                size: 0,
                name: ::std::string::String::new(),
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Struct {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Struct").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Struct {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Struct {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Struct`
    pub mod struct_ {
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Struct.Field)
        pub struct Field {
            // message fields
            // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Struct.Field.name)
            pub name: ::std::string::String,
            // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Struct.Field.statistics)
            pub statistics: ::protobuf::MessageField<super::super::Statistics>,
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Struct.Field.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Field {
            fn default() -> &'a Field {
                <Field as ::protobuf::Message>::default_instance()
            }
        }

        impl Field {
            pub fn new() -> Field {
                ::std::default::Default::default()
            }

            // string name = 1;

            pub fn name(&self) -> &str {
                &self.name
            }

            pub fn clear_name(&mut self) {
                self.name.clear();
            }

            // Param is passed by value, moved
            pub fn set_name(&mut self, v: ::std::string::String) {
                self.name = v;
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_name(&mut self) -> &mut ::std::string::String {
                &mut self.name
            }

            // Take field
            pub fn take_name(&mut self) -> ::std::string::String {
                ::std::mem::replace(&mut self.name, ::std::string::String::new())
            }

            // .sarus_data_spec.Statistics statistics = 2;

            pub fn statistics(&self) -> &super::super::Statistics {
                self.statistics.as_ref().unwrap_or_else(|| <super::super::Statistics as ::protobuf::Message>::default_instance())
            }

            pub fn clear_statistics(&mut self) {
                self.statistics.clear();
            }

            pub fn has_statistics(&self) -> bool {
                self.statistics.is_some()
            }

            // Param is passed by value, moved
            pub fn set_statistics(&mut self, v: super::super::Statistics) {
                self.statistics = ::protobuf::MessageField::some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_statistics(&mut self) -> &mut super::super::Statistics {
                self.statistics.mut_or_insert_default()
            }

            // Take field
            pub fn take_statistics(&mut self) -> super::super::Statistics {
                self.statistics.take().unwrap_or_else(|| super::super::Statistics::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "name",
                    |m: &Field| { &m.name },
                    |m: &mut Field| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::Statistics>(
                    "statistics",
                    |m: &Field| { &m.statistics },
                    |m: &mut Field| { &mut m.statistics },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Field>(
                    "Statistics.Struct.Field",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Field {
            const NAME: &'static str = "Field";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.name = is.read_string()?;
                        },
                        18 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.statistics)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.name.is_empty() {
                    my_size += ::protobuf::rt::string_size(1, &self.name);
                }
                if let Some(v) = self.statistics.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.name.is_empty() {
                    os.write_string(1, &self.name)?;
                }
                if let Some(v) = self.statistics.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Field {
                Field::new()
            }

            fn clear(&mut self) {
                self.name.clear();
                self.statistics.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Field {
                static instance: Field = Field {
                    name: ::std::string::String::new(),
                    statistics: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Field {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Statistics.Struct.Field").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Field {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Field {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Union)
    pub struct Union {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Union.fields)
        pub fields: ::std::vec::Vec<union::Field>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Union.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Union.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Union.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Union.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Union {
        fn default() -> &'a Union {
            <Union as ::protobuf::Message>::default_instance()
        }
    }

    impl Union {
        pub fn new() -> Union {
            ::std::default::Default::default()
        }

        // repeated .sarus_data_spec.Statistics.Union.Field fields = 1;

        pub fn fields(&self) -> &[union::Field] {
            &self.fields
        }

        pub fn clear_fields(&mut self) {
            self.fields.clear();
        }

        // Param is passed by value, moved
        pub fn set_fields(&mut self, v: ::std::vec::Vec<union::Field>) {
            self.fields = v;
        }

        // Mutable pointer to the field.
        pub fn mut_fields(&mut self) -> &mut ::std::vec::Vec<union::Field> {
            &mut self.fields
        }

        // Take field
        pub fn take_fields(&mut self) -> ::std::vec::Vec<union::Field> {
            ::std::mem::replace(&mut self.fields, ::std::vec::Vec::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // string name = 3;

        pub fn name(&self) -> &str {
            &self.name
        }

        pub fn clear_name(&mut self) {
            self.name.clear();
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            &mut self.name
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.name, ::std::string::String::new())
        }

        // double multiplicity = 4;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "fields",
                |m: &Union| { &m.fields },
                |m: &mut Union| { &mut m.fields },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Union| { &m.size },
                |m: &mut Union| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Union| { &m.name },
                |m: &mut Union| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Union| { &m.multiplicity },
                |m: &mut Union| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Union>(
                "Statistics.Union",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Union {
        const NAME: &'static str = "Union";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.fields.push(is.read_message()?);
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    26 => {
                        self.name = is.read_string()?;
                    },
                    33 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.fields {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.name);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.fields {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if !self.name.is_empty() {
                os.write_string(3, &self.name)?;
            }
            if self.multiplicity != 0. {
                os.write_double(4, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Union {
            Union::new()
        }

        fn clear(&mut self) {
            self.fields.clear();
            self.size = 0;
            self.name.clear();
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Union {
            static instance: Union = Union {
                fields: ::std::vec::Vec::new(),
                size: 0,
                name: ::std::string::String::new(),
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Union {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Union").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Union {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Union {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Union`
    pub mod union {
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Union.Field)
        pub struct Field {
            // message fields
            // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Union.Field.name)
            pub name: ::std::string::String,
            // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Union.Field.statistics)
            pub statistics: ::protobuf::MessageField<super::super::Statistics>,
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Union.Field.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Field {
            fn default() -> &'a Field {
                <Field as ::protobuf::Message>::default_instance()
            }
        }

        impl Field {
            pub fn new() -> Field {
                ::std::default::Default::default()
            }

            // string name = 1;

            pub fn name(&self) -> &str {
                &self.name
            }

            pub fn clear_name(&mut self) {
                self.name.clear();
            }

            // Param is passed by value, moved
            pub fn set_name(&mut self, v: ::std::string::String) {
                self.name = v;
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_name(&mut self) -> &mut ::std::string::String {
                &mut self.name
            }

            // Take field
            pub fn take_name(&mut self) -> ::std::string::String {
                ::std::mem::replace(&mut self.name, ::std::string::String::new())
            }

            // .sarus_data_spec.Statistics statistics = 2;

            pub fn statistics(&self) -> &super::super::Statistics {
                self.statistics.as_ref().unwrap_or_else(|| <super::super::Statistics as ::protobuf::Message>::default_instance())
            }

            pub fn clear_statistics(&mut self) {
                self.statistics.clear();
            }

            pub fn has_statistics(&self) -> bool {
                self.statistics.is_some()
            }

            // Param is passed by value, moved
            pub fn set_statistics(&mut self, v: super::super::Statistics) {
                self.statistics = ::protobuf::MessageField::some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_statistics(&mut self) -> &mut super::super::Statistics {
                self.statistics.mut_or_insert_default()
            }

            // Take field
            pub fn take_statistics(&mut self) -> super::super::Statistics {
                self.statistics.take().unwrap_or_else(|| super::super::Statistics::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "name",
                    |m: &Field| { &m.name },
                    |m: &mut Field| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::Statistics>(
                    "statistics",
                    |m: &Field| { &m.statistics },
                    |m: &mut Field| { &mut m.statistics },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Field>(
                    "Statistics.Union.Field",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Field {
            const NAME: &'static str = "Field";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.name = is.read_string()?;
                        },
                        18 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.statistics)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.name.is_empty() {
                    my_size += ::protobuf::rt::string_size(1, &self.name);
                }
                if let Some(v) = self.statistics.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.name.is_empty() {
                    os.write_string(1, &self.name)?;
                }
                if let Some(v) = self.statistics.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Field {
                Field::new()
            }

            fn clear(&mut self) {
                self.name.clear();
                self.statistics.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Field {
                static instance: Field = Field {
                    name: ::std::string::String::new(),
                    statistics: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Field {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Statistics.Union.Field").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Field {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Field {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Optional)
    pub struct Optional {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Optional.statistics)
        pub statistics: ::protobuf::MessageField<super::Statistics>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Optional.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Optional.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Optional.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Optional.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Optional {
        fn default() -> &'a Optional {
            <Optional as ::protobuf::Message>::default_instance()
        }
    }

    impl Optional {
        pub fn new() -> Optional {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Statistics statistics = 1;

        pub fn statistics(&self) -> &super::Statistics {
            self.statistics.as_ref().unwrap_or_else(|| <super::Statistics as ::protobuf::Message>::default_instance())
        }

        pub fn clear_statistics(&mut self) {
            self.statistics.clear();
        }

        pub fn has_statistics(&self) -> bool {
            self.statistics.is_some()
        }

        // Param is passed by value, moved
        pub fn set_statistics(&mut self, v: super::Statistics) {
            self.statistics = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_statistics(&mut self) -> &mut super::Statistics {
            self.statistics.mut_or_insert_default()
        }

        // Take field
        pub fn take_statistics(&mut self) -> super::Statistics {
            self.statistics.take().unwrap_or_else(|| super::Statistics::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // string name = 3;

        pub fn name(&self) -> &str {
            &self.name
        }

        pub fn clear_name(&mut self) {
            self.name.clear();
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            &mut self.name
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.name, ::std::string::String::new())
        }

        // double multiplicity = 4;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Statistics>(
                "statistics",
                |m: &Optional| { &m.statistics },
                |m: &mut Optional| { &mut m.statistics },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Optional| { &m.size },
                |m: &mut Optional| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Optional| { &m.name },
                |m: &mut Optional| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Optional| { &m.multiplicity },
                |m: &mut Optional| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Optional>(
                "Statistics.Optional",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Optional {
        const NAME: &'static str = "Optional";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.statistics)?;
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    26 => {
                        self.name = is.read_string()?;
                    },
                    33 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.statistics.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.name);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.statistics.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if !self.name.is_empty() {
                os.write_string(3, &self.name)?;
            }
            if self.multiplicity != 0. {
                os.write_double(4, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Optional {
            Optional::new()
        }

        fn clear(&mut self) {
            self.statistics.clear();
            self.size = 0;
            self.name.clear();
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Optional {
            static instance: Optional = Optional {
                statistics: ::protobuf::MessageField::none(),
                size: 0,
                name: ::std::string::String::new(),
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Optional {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Optional").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Optional {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Optional {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.List)
    pub struct List {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.List.statistics)
        pub statistics: ::protobuf::MessageField<super::Statistics>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.List.distribution)
        pub distribution: ::protobuf::MessageField<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.List.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.List.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.List.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a List {
        fn default() -> &'a List {
            <List as ::protobuf::Message>::default_instance()
        }
    }

    impl List {
        pub fn new() -> List {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Statistics statistics = 1;

        pub fn statistics(&self) -> &super::Statistics {
            self.statistics.as_ref().unwrap_or_else(|| <super::Statistics as ::protobuf::Message>::default_instance())
        }

        pub fn clear_statistics(&mut self) {
            self.statistics.clear();
        }

        pub fn has_statistics(&self) -> bool {
            self.statistics.is_some()
        }

        // Param is passed by value, moved
        pub fn set_statistics(&mut self, v: super::Statistics) {
            self.statistics = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_statistics(&mut self) -> &mut super::Statistics {
            self.statistics.mut_or_insert_default()
        }

        // Take field
        pub fn take_statistics(&mut self) -> super::Statistics {
            self.statistics.take().unwrap_or_else(|| super::Statistics::new())
        }

        // .sarus_data_spec.Distribution distribution = 2;

        pub fn distribution(&self) -> &super::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::Distribution {
            self.distribution.take().unwrap_or_else(|| super::Distribution::new())
        }

        // int64 size = 3;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 4;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Statistics>(
                "statistics",
                |m: &List| { &m.statistics },
                |m: &mut List| { &mut m.statistics },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Distribution>(
                "distribution",
                |m: &List| { &m.distribution },
                |m: &mut List| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &List| { &m.size },
                |m: &mut List| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &List| { &m.multiplicity },
                |m: &mut List| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<List>(
                "Statistics.List",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for List {
        const NAME: &'static str = "List";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.statistics)?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    24 => {
                        self.size = is.read_int64()?;
                    },
                    33 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.statistics.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(3, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.statistics.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(3, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(4, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> List {
            List::new()
        }

        fn clear(&mut self) {
            self.statistics.clear();
            self.distribution.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static List {
            static instance: List = List {
                statistics: ::protobuf::MessageField::none(),
                distribution: ::protobuf::MessageField::none(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for List {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.List").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for List {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for List {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Array)
    pub struct Array {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Array.statistics)
        pub statistics: ::protobuf::MessageField<super::Statistics>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Array.distributions)
        pub distributions: ::std::vec::Vec<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Array.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Array.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Array.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Array {
        fn default() -> &'a Array {
            <Array as ::protobuf::Message>::default_instance()
        }
    }

    impl Array {
        pub fn new() -> Array {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Statistics statistics = 1;

        pub fn statistics(&self) -> &super::Statistics {
            self.statistics.as_ref().unwrap_or_else(|| <super::Statistics as ::protobuf::Message>::default_instance())
        }

        pub fn clear_statistics(&mut self) {
            self.statistics.clear();
        }

        pub fn has_statistics(&self) -> bool {
            self.statistics.is_some()
        }

        // Param is passed by value, moved
        pub fn set_statistics(&mut self, v: super::Statistics) {
            self.statistics = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_statistics(&mut self) -> &mut super::Statistics {
            self.statistics.mut_or_insert_default()
        }

        // Take field
        pub fn take_statistics(&mut self) -> super::Statistics {
            self.statistics.take().unwrap_or_else(|| super::Statistics::new())
        }

        // repeated .sarus_data_spec.Distribution distributions = 2;

        pub fn distributions(&self) -> &[super::Distribution] {
            &self.distributions
        }

        pub fn clear_distributions(&mut self) {
            self.distributions.clear();
        }

        // Param is passed by value, moved
        pub fn set_distributions(&mut self, v: ::std::vec::Vec<super::Distribution>) {
            self.distributions = v;
        }

        // Mutable pointer to the field.
        pub fn mut_distributions(&mut self) -> &mut ::std::vec::Vec<super::Distribution> {
            &mut self.distributions
        }

        // Take field
        pub fn take_distributions(&mut self) -> ::std::vec::Vec<super::Distribution> {
            ::std::mem::replace(&mut self.distributions, ::std::vec::Vec::new())
        }

        // int64 size = 3;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 4;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Statistics>(
                "statistics",
                |m: &Array| { &m.statistics },
                |m: &mut Array| { &mut m.statistics },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "distributions",
                |m: &Array| { &m.distributions },
                |m: &mut Array| { &mut m.distributions },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Array| { &m.size },
                |m: &mut Array| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Array| { &m.multiplicity },
                |m: &mut Array| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Array>(
                "Statistics.Array",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Array {
        const NAME: &'static str = "Array";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.statistics)?;
                    },
                    18 => {
                        self.distributions.push(is.read_message()?);
                    },
                    24 => {
                        self.size = is.read_int64()?;
                    },
                    33 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.statistics.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            for value in &self.distributions {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(3, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.statistics.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            for v in &self.distributions {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            if self.size != 0 {
                os.write_int64(3, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(4, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Array {
            Array::new()
        }

        fn clear(&mut self) {
            self.statistics.clear();
            self.distributions.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Array {
            static instance: Array = Array {
                statistics: ::protobuf::MessageField::none(),
                distributions: ::std::vec::Vec::new(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Array {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Array").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Array {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Array {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Datetime)
    pub struct Datetime {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Datetime.distribution)
        pub distribution: ::protobuf::MessageField<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Datetime.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Datetime.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Datetime.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Datetime {
        fn default() -> &'a Datetime {
            <Datetime as ::protobuf::Message>::default_instance()
        }
    }

    impl Datetime {
        pub fn new() -> Datetime {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Distribution distribution = 1;

        pub fn distribution(&self) -> &super::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::Distribution {
            self.distribution.take().unwrap_or_else(|| super::Distribution::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 3;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Distribution>(
                "distribution",
                |m: &Datetime| { &m.distribution },
                |m: &mut Datetime| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Datetime| { &m.size },
                |m: &mut Datetime| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Datetime| { &m.multiplicity },
                |m: &mut Datetime| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Datetime>(
                "Statistics.Datetime",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Datetime {
        const NAME: &'static str = "Datetime";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    25 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(3, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Datetime {
            Datetime::new()
        }

        fn clear(&mut self) {
            self.distribution.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Datetime {
            static instance: Datetime = Datetime {
                distribution: ::protobuf::MessageField::none(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Datetime {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Datetime").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Datetime {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Datetime {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Date)
    pub struct Date {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Date.distribution)
        pub distribution: ::protobuf::MessageField<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Date.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Date.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Date.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Date {
        fn default() -> &'a Date {
            <Date as ::protobuf::Message>::default_instance()
        }
    }

    impl Date {
        pub fn new() -> Date {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Distribution distribution = 1;

        pub fn distribution(&self) -> &super::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::Distribution {
            self.distribution.take().unwrap_or_else(|| super::Distribution::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 3;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Distribution>(
                "distribution",
                |m: &Date| { &m.distribution },
                |m: &mut Date| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Date| { &m.size },
                |m: &mut Date| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Date| { &m.multiplicity },
                |m: &mut Date| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Date>(
                "Statistics.Date",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Date {
        const NAME: &'static str = "Date";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    25 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(3, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Date {
            Date::new()
        }

        fn clear(&mut self) {
            self.distribution.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Date {
            static instance: Date = Date {
                distribution: ::protobuf::MessageField::none(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Date {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Date").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Date {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Date {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Time)
    pub struct Time {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Time.distribution)
        pub distribution: ::protobuf::MessageField<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Time.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Time.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Time.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Time {
        fn default() -> &'a Time {
            <Time as ::protobuf::Message>::default_instance()
        }
    }

    impl Time {
        pub fn new() -> Time {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Distribution distribution = 1;

        pub fn distribution(&self) -> &super::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::Distribution {
            self.distribution.take().unwrap_or_else(|| super::Distribution::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 3;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Distribution>(
                "distribution",
                |m: &Time| { &m.distribution },
                |m: &mut Time| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Time| { &m.size },
                |m: &mut Time| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Time| { &m.multiplicity },
                |m: &mut Time| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Time>(
                "Statistics.Time",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Time {
        const NAME: &'static str = "Time";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    25 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(3, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Time {
            Time::new()
        }

        fn clear(&mut self) {
            self.distribution.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Time {
            static instance: Time = Time {
                distribution: ::protobuf::MessageField::none(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Time {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Time").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Time {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Time {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Duration)
    pub struct Duration {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Duration.distribution)
        pub distribution: ::protobuf::MessageField<super::Distribution>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Duration.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Duration.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Duration.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Duration {
        fn default() -> &'a Duration {
            <Duration as ::protobuf::Message>::default_instance()
        }
    }

    impl Duration {
        pub fn new() -> Duration {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Distribution distribution = 1;

        pub fn distribution(&self) -> &super::Distribution {
            self.distribution.as_ref().unwrap_or_else(|| <super::Distribution as ::protobuf::Message>::default_instance())
        }

        pub fn clear_distribution(&mut self) {
            self.distribution.clear();
        }

        pub fn has_distribution(&self) -> bool {
            self.distribution.is_some()
        }

        // Param is passed by value, moved
        pub fn set_distribution(&mut self, v: super::Distribution) {
            self.distribution = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_distribution(&mut self) -> &mut super::Distribution {
            self.distribution.mut_or_insert_default()
        }

        // Take field
        pub fn take_distribution(&mut self) -> super::Distribution {
            self.distribution.take().unwrap_or_else(|| super::Distribution::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 3;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Distribution>(
                "distribution",
                |m: &Duration| { &m.distribution },
                |m: &mut Duration| { &mut m.distribution },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Duration| { &m.size },
                |m: &mut Duration| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Duration| { &m.multiplicity },
                |m: &mut Duration| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Duration>(
                "Statistics.Duration",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Duration {
        const NAME: &'static str = "Duration";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.distribution)?;
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    25 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.distribution.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.distribution.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(3, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Duration {
            Duration::new()
        }

        fn clear(&mut self) {
            self.distribution.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Duration {
            static instance: Duration = Duration {
                distribution: ::protobuf::MessageField::none(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Duration {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Duration").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Duration {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Duration {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Statistics.Constrained)
    pub struct Constrained {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Constrained.statistics)
        pub statistics: ::protobuf::MessageField<super::Statistics>,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Constrained.size)
        pub size: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Statistics.Constrained.multiplicity)
        pub multiplicity: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Statistics.Constrained.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Constrained {
        fn default() -> &'a Constrained {
            <Constrained as ::protobuf::Message>::default_instance()
        }
    }

    impl Constrained {
        pub fn new() -> Constrained {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Statistics statistics = 1;

        pub fn statistics(&self) -> &super::Statistics {
            self.statistics.as_ref().unwrap_or_else(|| <super::Statistics as ::protobuf::Message>::default_instance())
        }

        pub fn clear_statistics(&mut self) {
            self.statistics.clear();
        }

        pub fn has_statistics(&self) -> bool {
            self.statistics.is_some()
        }

        // Param is passed by value, moved
        pub fn set_statistics(&mut self, v: super::Statistics) {
            self.statistics = ::protobuf::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_statistics(&mut self) -> &mut super::Statistics {
            self.statistics.mut_or_insert_default()
        }

        // Take field
        pub fn take_statistics(&mut self) -> super::Statistics {
            self.statistics.take().unwrap_or_else(|| super::Statistics::new())
        }

        // int64 size = 2;

        pub fn size(&self) -> i64 {
            self.size
        }

        pub fn clear_size(&mut self) {
            self.size = 0;
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: i64) {
            self.size = v;
        }

        // double multiplicity = 3;

        pub fn multiplicity(&self) -> f64 {
            self.multiplicity
        }

        pub fn clear_multiplicity(&mut self) {
            self.multiplicity = 0.;
        }

        // Param is passed by value, moved
        pub fn set_multiplicity(&mut self, v: f64) {
            self.multiplicity = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Statistics>(
                "statistics",
                |m: &Constrained| { &m.statistics },
                |m: &mut Constrained| { &mut m.statistics },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &Constrained| { &m.size },
                |m: &mut Constrained| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "multiplicity",
                |m: &Constrained| { &m.multiplicity },
                |m: &mut Constrained| { &mut m.multiplicity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Constrained>(
                "Statistics.Constrained",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Constrained {
        const NAME: &'static str = "Constrained";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.statistics)?;
                    },
                    16 => {
                        self.size = is.read_int64()?;
                    },
                    25 => {
                        self.multiplicity = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.statistics.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.size);
            }
            if self.multiplicity != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.statistics.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.size != 0 {
                os.write_int64(2, self.size)?;
            }
            if self.multiplicity != 0. {
                os.write_double(3, self.multiplicity)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Constrained {
            Constrained::new()
        }

        fn clear(&mut self) {
            self.statistics.clear();
            self.size = 0;
            self.multiplicity = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Constrained {
            static instance: Constrained = Constrained {
                statistics: ::protobuf::MessageField::none(),
                size: 0,
                multiplicity: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Constrained {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Statistics.Constrained").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Constrained {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Constrained {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sarus_data_spec.Distribution)
pub struct Distribution {
    // message fields
    // @@protoc_insertion_point(field:sarus_data_spec.Distribution.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // message oneof groups
    pub distribution: ::std::option::Option<distribution::Distribution>,
    // special fields
    // @@protoc_insertion_point(special_field:sarus_data_spec.Distribution.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Distribution {
    fn default() -> &'a Distribution {
        <Distribution as ::protobuf::Message>::default_instance()
    }
}

impl Distribution {
    pub fn new() -> Distribution {
        ::std::default::Default::default()
    }

    // .sarus_data_spec.Distribution.Double double = 1;

    pub fn double(&self) -> &distribution::Double {
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Double(ref v)) => v,
            _ => <distribution::Double as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_double(&mut self) {
        self.distribution = ::std::option::Option::None;
    }

    pub fn has_double(&self) -> bool {
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Double(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double(&mut self, v: distribution::Double) {
        self.distribution = ::std::option::Option::Some(distribution::Distribution::Double(v))
    }

    // Mutable pointer to the field.
    pub fn mut_double(&mut self) -> &mut distribution::Double {
        if let ::std::option::Option::Some(distribution::Distribution::Double(_)) = self.distribution {
        } else {
            self.distribution = ::std::option::Option::Some(distribution::Distribution::Double(distribution::Double::new()));
        }
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Double(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_double(&mut self) -> distribution::Double {
        if self.has_double() {
            match self.distribution.take() {
                ::std::option::Option::Some(distribution::Distribution::Double(v)) => v,
                _ => panic!(),
            }
        } else {
            distribution::Double::new()
        }
    }

    // .sarus_data_spec.Distribution.Integer integer = 2;

    pub fn integer(&self) -> &distribution::Integer {
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Integer(ref v)) => v,
            _ => <distribution::Integer as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_integer(&mut self) {
        self.distribution = ::std::option::Option::None;
    }

    pub fn has_integer(&self) -> bool {
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Integer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_integer(&mut self, v: distribution::Integer) {
        self.distribution = ::std::option::Option::Some(distribution::Distribution::Integer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_integer(&mut self) -> &mut distribution::Integer {
        if let ::std::option::Option::Some(distribution::Distribution::Integer(_)) = self.distribution {
        } else {
            self.distribution = ::std::option::Option::Some(distribution::Distribution::Integer(distribution::Integer::new()));
        }
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Integer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_integer(&mut self) -> distribution::Integer {
        if self.has_integer() {
            match self.distribution.take() {
                ::std::option::Option::Some(distribution::Distribution::Integer(v)) => v,
                _ => panic!(),
            }
        } else {
            distribution::Integer::new()
        }
    }

    // .sarus_data_spec.Distribution.Boolean boolean = 3;

    pub fn boolean(&self) -> &distribution::Boolean {
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Boolean(ref v)) => v,
            _ => <distribution::Boolean as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_boolean(&mut self) {
        self.distribution = ::std::option::Option::None;
    }

    pub fn has_boolean(&self) -> bool {
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Boolean(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_boolean(&mut self, v: distribution::Boolean) {
        self.distribution = ::std::option::Option::Some(distribution::Distribution::Boolean(v))
    }

    // Mutable pointer to the field.
    pub fn mut_boolean(&mut self) -> &mut distribution::Boolean {
        if let ::std::option::Option::Some(distribution::Distribution::Boolean(_)) = self.distribution {
        } else {
            self.distribution = ::std::option::Option::Some(distribution::Distribution::Boolean(distribution::Boolean::new()));
        }
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Boolean(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_boolean(&mut self) -> distribution::Boolean {
        if self.has_boolean() {
            match self.distribution.take() {
                ::std::option::Option::Some(distribution::Distribution::Boolean(v)) => v,
                _ => panic!(),
            }
        } else {
            distribution::Boolean::new()
        }
    }

    // .sarus_data_spec.Distribution.Enum enum = 4;

    pub fn enum_(&self) -> &distribution::Enum {
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Enum(ref v)) => v,
            _ => <distribution::Enum as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_enum_(&mut self) {
        self.distribution = ::std::option::Option::None;
    }

    pub fn has_enum(&self) -> bool {
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Enum(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_enum(&mut self, v: distribution::Enum) {
        self.distribution = ::std::option::Option::Some(distribution::Distribution::Enum(v))
    }

    // Mutable pointer to the field.
    pub fn mut_enum(&mut self) -> &mut distribution::Enum {
        if let ::std::option::Option::Some(distribution::Distribution::Enum(_)) = self.distribution {
        } else {
            self.distribution = ::std::option::Option::Some(distribution::Distribution::Enum(distribution::Enum::new()));
        }
        match self.distribution {
            ::std::option::Option::Some(distribution::Distribution::Enum(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_enum_(&mut self) -> distribution::Enum {
        if self.has_enum() {
            match self.distribution.take() {
                ::std::option::Option::Some(distribution::Distribution::Enum(v)) => v,
                _ => panic!(),
            }
        } else {
            distribution::Enum::new()
        }
    }

    // repeated .sarus_data_spec.Distribution.PropertiesEntry properties = 5;

    pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.properties
    }

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, distribution::Double>(
            "double",
            Distribution::has_double,
            Distribution::double,
            Distribution::mut_double,
            Distribution::set_double,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, distribution::Integer>(
            "integer",
            Distribution::has_integer,
            Distribution::integer,
            Distribution::mut_integer,
            Distribution::set_integer,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, distribution::Boolean>(
            "boolean",
            Distribution::has_boolean,
            Distribution::boolean,
            Distribution::mut_boolean,
            Distribution::set_boolean,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, distribution::Enum>(
            "enum",
            Distribution::has_enum,
            Distribution::enum_,
            Distribution::mut_enum,
            Distribution::set_enum,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &Distribution| { &m.properties },
            |m: &mut Distribution| { &mut m.properties },
        ));
        oneofs.push(distribution::Distribution::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Distribution>(
            "Distribution",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Distribution {
    const NAME: &'static str = "Distribution";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.distribution = ::std::option::Option::Some(distribution::Distribution::Double(is.read_message()?));
                },
                18 => {
                    self.distribution = ::std::option::Option::Some(distribution::Distribution::Integer(is.read_message()?));
                },
                26 => {
                    self.distribution = ::std::option::Option::Some(distribution::Distribution::Boolean(is.read_message()?));
                },
                34 => {
                    self.distribution = ::std::option::Option::Some(distribution::Distribution::Enum(is.read_message()?));
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let ::std::option::Option::Some(ref v) = self.distribution {
            match v {
                &distribution::Distribution::Double(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &distribution::Distribution::Integer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &distribution::Distribution::Boolean(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &distribution::Distribution::Enum(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.distribution {
            match v {
                &distribution::Distribution::Double(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &distribution::Distribution::Integer(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &distribution::Distribution::Boolean(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &distribution::Distribution::Enum(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Distribution {
        Distribution::new()
    }

    fn clear(&mut self) {
        self.distribution = ::std::option::Option::None;
        self.distribution = ::std::option::Option::None;
        self.distribution = ::std::option::Option::None;
        self.distribution = ::std::option::Option::None;
        self.properties.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Distribution {
        static instance: ::protobuf::rt::Lazy<Distribution> = ::protobuf::rt::Lazy::new();
        instance.get(Distribution::new)
    }
}

impl ::protobuf::MessageFull for Distribution {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Distribution").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Distribution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Distribution {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Distribution`
pub mod distribution {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:sarus_data_spec.Distribution.distribution)
    pub enum Distribution {
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Distribution.double)
        Double(Double),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Distribution.integer)
        Integer(Integer),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Distribution.boolean)
        Boolean(Boolean),
        // @@protoc_insertion_point(oneof_field:sarus_data_spec.Distribution.enum)
        Enum(Enum),
    }

    impl ::protobuf::Oneof for Distribution {
    }

    impl ::protobuf::OneofFull for Distribution {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Distribution as ::protobuf::MessageFull>::descriptor().oneof_by_name("distribution").unwrap()).clone()
        }
    }

    impl Distribution {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Distribution>("distribution")
        }
    }
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Distribution.Double)
    pub struct Double {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Double.points)
        pub points: ::std::vec::Vec<double::Point>,
        // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Double.min)
        pub min: f64,
        // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Double.max)
        pub max: f64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Distribution.Double.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Double {
        fn default() -> &'a Double {
            <Double as ::protobuf::Message>::default_instance()
        }
    }

    impl Double {
        pub fn new() -> Double {
            ::std::default::Default::default()
        }

        // repeated .sarus_data_spec.Distribution.Double.Point points = 1;

        pub fn points(&self) -> &[double::Point] {
            &self.points
        }

        pub fn clear_points(&mut self) {
            self.points.clear();
        }

        // Param is passed by value, moved
        pub fn set_points(&mut self, v: ::std::vec::Vec<double::Point>) {
            self.points = v;
        }

        // Mutable pointer to the field.
        pub fn mut_points(&mut self) -> &mut ::std::vec::Vec<double::Point> {
            &mut self.points
        }

        // Take field
        pub fn take_points(&mut self) -> ::std::vec::Vec<double::Point> {
            ::std::mem::replace(&mut self.points, ::std::vec::Vec::new())
        }

        // double min = 2;

        pub fn min(&self) -> f64 {
            self.min
        }

        pub fn clear_min(&mut self) {
            self.min = 0.;
        }

        // Param is passed by value, moved
        pub fn set_min(&mut self, v: f64) {
            self.min = v;
        }

        // double max = 3;

        pub fn max(&self) -> f64 {
            self.max
        }

        pub fn clear_max(&mut self) {
            self.max = 0.;
        }

        // Param is passed by value, moved
        pub fn set_max(&mut self, v: f64) {
            self.max = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "points",
                |m: &Double| { &m.points },
                |m: &mut Double| { &mut m.points },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "min",
                |m: &Double| { &m.min },
                |m: &mut Double| { &mut m.min },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "max",
                |m: &Double| { &m.max },
                |m: &mut Double| { &mut m.max },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Double>(
                "Distribution.Double",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Double {
        const NAME: &'static str = "Double";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.points.push(is.read_message()?);
                    },
                    17 => {
                        self.min = is.read_double()?;
                    },
                    25 => {
                        self.max = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.points {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if self.min != 0. {
                my_size += 1 + 8;
            }
            if self.max != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.points {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            if self.min != 0. {
                os.write_double(2, self.min)?;
            }
            if self.max != 0. {
                os.write_double(3, self.max)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Double {
            Double::new()
        }

        fn clear(&mut self) {
            self.points.clear();
            self.min = 0.;
            self.max = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Double {
            static instance: Double = Double {
                points: ::std::vec::Vec::new(),
                min: 0.,
                max: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Double {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Distribution.Double").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Double {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Double {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Double`
    pub mod double {
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:sarus_data_spec.Distribution.Double.Point)
        pub struct Point {
            // message fields
            // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Double.Point.value)
            pub value: f64,
            // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Double.Point.probability)
            pub probability: f64,
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Distribution.Double.Point.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Point {
            fn default() -> &'a Point {
                <Point as ::protobuf::Message>::default_instance()
            }
        }

        impl Point {
            pub fn new() -> Point {
                ::std::default::Default::default()
            }

            // double value = 2;

            pub fn value(&self) -> f64 {
                self.value
            }

            pub fn clear_value(&mut self) {
                self.value = 0.;
            }

            // Param is passed by value, moved
            pub fn set_value(&mut self, v: f64) {
                self.value = v;
            }

            // double probability = 3;

            pub fn probability(&self) -> f64 {
                self.probability
            }

            pub fn clear_probability(&mut self) {
                self.probability = 0.;
            }

            // Param is passed by value, moved
            pub fn set_probability(&mut self, v: f64) {
                self.probability = v;
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "value",
                    |m: &Point| { &m.value },
                    |m: &mut Point| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "probability",
                    |m: &Point| { &m.probability },
                    |m: &mut Point| { &mut m.probability },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Point>(
                    "Distribution.Double.Point",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Point {
            const NAME: &'static str = "Point";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        17 => {
                            self.value = is.read_double()?;
                        },
                        25 => {
                            self.probability = is.read_double()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.value != 0. {
                    my_size += 1 + 8;
                }
                if self.probability != 0. {
                    my_size += 1 + 8;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.value != 0. {
                    os.write_double(2, self.value)?;
                }
                if self.probability != 0. {
                    os.write_double(3, self.probability)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Point {
                Point::new()
            }

            fn clear(&mut self) {
                self.value = 0.;
                self.probability = 0.;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Point {
                static instance: Point = Point {
                    value: 0.,
                    probability: 0.,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Point {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Distribution.Double.Point").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Point {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Point {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Distribution.Integer)
    pub struct Integer {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Integer.points)
        pub points: ::std::vec::Vec<integer::Point>,
        // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Integer.min)
        pub min: i64,
        // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Integer.max)
        pub max: i64,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Distribution.Integer.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Integer {
        fn default() -> &'a Integer {
            <Integer as ::protobuf::Message>::default_instance()
        }
    }

    impl Integer {
        pub fn new() -> Integer {
            ::std::default::Default::default()
        }

        // repeated .sarus_data_spec.Distribution.Integer.Point points = 1;

        pub fn points(&self) -> &[integer::Point] {
            &self.points
        }

        pub fn clear_points(&mut self) {
            self.points.clear();
        }

        // Param is passed by value, moved
        pub fn set_points(&mut self, v: ::std::vec::Vec<integer::Point>) {
            self.points = v;
        }

        // Mutable pointer to the field.
        pub fn mut_points(&mut self) -> &mut ::std::vec::Vec<integer::Point> {
            &mut self.points
        }

        // Take field
        pub fn take_points(&mut self) -> ::std::vec::Vec<integer::Point> {
            ::std::mem::replace(&mut self.points, ::std::vec::Vec::new())
        }

        // int64 min = 2;

        pub fn min(&self) -> i64 {
            self.min
        }

        pub fn clear_min(&mut self) {
            self.min = 0;
        }

        // Param is passed by value, moved
        pub fn set_min(&mut self, v: i64) {
            self.min = v;
        }

        // int64 max = 3;

        pub fn max(&self) -> i64 {
            self.max
        }

        pub fn clear_max(&mut self) {
            self.max = 0;
        }

        // Param is passed by value, moved
        pub fn set_max(&mut self, v: i64) {
            self.max = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "points",
                |m: &Integer| { &m.points },
                |m: &mut Integer| { &mut m.points },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "min",
                |m: &Integer| { &m.min },
                |m: &mut Integer| { &mut m.min },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "max",
                |m: &Integer| { &m.max },
                |m: &mut Integer| { &mut m.max },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Integer>(
                "Distribution.Integer",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Integer {
        const NAME: &'static str = "Integer";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.points.push(is.read_message()?);
                    },
                    16 => {
                        self.min = is.read_int64()?;
                    },
                    24 => {
                        self.max = is.read_int64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.points {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if self.min != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.min);
            }
            if self.max != 0 {
                my_size += ::protobuf::rt::int64_size(3, self.max);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.points {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            if self.min != 0 {
                os.write_int64(2, self.min)?;
            }
            if self.max != 0 {
                os.write_int64(3, self.max)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Integer {
            Integer::new()
        }

        fn clear(&mut self) {
            self.points.clear();
            self.min = 0;
            self.max = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Integer {
            static instance: Integer = Integer {
                points: ::std::vec::Vec::new(),
                min: 0,
                max: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Integer {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Distribution.Integer").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Integer {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Integer {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Integer`
    pub mod integer {
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:sarus_data_spec.Distribution.Integer.Point)
        pub struct Point {
            // message fields
            // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Integer.Point.value)
            pub value: i64,
            // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Integer.Point.probability)
            pub probability: f64,
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Distribution.Integer.Point.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Point {
            fn default() -> &'a Point {
                <Point as ::protobuf::Message>::default_instance()
            }
        }

        impl Point {
            pub fn new() -> Point {
                ::std::default::Default::default()
            }

            // int64 value = 1;

            pub fn value(&self) -> i64 {
                self.value
            }

            pub fn clear_value(&mut self) {
                self.value = 0;
            }

            // Param is passed by value, moved
            pub fn set_value(&mut self, v: i64) {
                self.value = v;
            }

            // double probability = 2;

            pub fn probability(&self) -> f64 {
                self.probability
            }

            pub fn clear_probability(&mut self) {
                self.probability = 0.;
            }

            // Param is passed by value, moved
            pub fn set_probability(&mut self, v: f64) {
                self.probability = v;
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "value",
                    |m: &Point| { &m.value },
                    |m: &mut Point| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "probability",
                    |m: &Point| { &m.probability },
                    |m: &mut Point| { &mut m.probability },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Point>(
                    "Distribution.Integer.Point",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Point {
            const NAME: &'static str = "Point";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.value = is.read_int64()?;
                        },
                        17 => {
                            self.probability = is.read_double()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.value != 0 {
                    my_size += ::protobuf::rt::int64_size(1, self.value);
                }
                if self.probability != 0. {
                    my_size += 1 + 8;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.value != 0 {
                    os.write_int64(1, self.value)?;
                }
                if self.probability != 0. {
                    os.write_double(2, self.probability)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Point {
                Point::new()
            }

            fn clear(&mut self) {
                self.value = 0;
                self.probability = 0.;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Point {
                static instance: Point = Point {
                    value: 0,
                    probability: 0.,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Point {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Distribution.Integer.Point").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Point {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Point {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Distribution.Boolean)
    pub struct Boolean {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Boolean.points)
        pub points: ::std::vec::Vec<boolean::Point>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Distribution.Boolean.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Boolean {
        fn default() -> &'a Boolean {
            <Boolean as ::protobuf::Message>::default_instance()
        }
    }

    impl Boolean {
        pub fn new() -> Boolean {
            ::std::default::Default::default()
        }

        // repeated .sarus_data_spec.Distribution.Boolean.Point points = 1;

        pub fn points(&self) -> &[boolean::Point] {
            &self.points
        }

        pub fn clear_points(&mut self) {
            self.points.clear();
        }

        // Param is passed by value, moved
        pub fn set_points(&mut self, v: ::std::vec::Vec<boolean::Point>) {
            self.points = v;
        }

        // Mutable pointer to the field.
        pub fn mut_points(&mut self) -> &mut ::std::vec::Vec<boolean::Point> {
            &mut self.points
        }

        // Take field
        pub fn take_points(&mut self) -> ::std::vec::Vec<boolean::Point> {
            ::std::mem::replace(&mut self.points, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "points",
                |m: &Boolean| { &m.points },
                |m: &mut Boolean| { &mut m.points },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Boolean>(
                "Distribution.Boolean",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Boolean {
        const NAME: &'static str = "Boolean";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.points.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.points {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.points {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Boolean {
            Boolean::new()
        }

        fn clear(&mut self) {
            self.points.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Boolean {
            static instance: Boolean = Boolean {
                points: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Boolean {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Distribution.Boolean").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Boolean {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Boolean {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Boolean`
    pub mod boolean {
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:sarus_data_spec.Distribution.Boolean.Point)
        pub struct Point {
            // message fields
            // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Boolean.Point.name)
            pub name: bool,
            // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Boolean.Point.value)
            pub value: i64,
            // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Boolean.Point.probability)
            pub probability: f64,
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Distribution.Boolean.Point.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Point {
            fn default() -> &'a Point {
                <Point as ::protobuf::Message>::default_instance()
            }
        }

        impl Point {
            pub fn new() -> Point {
                ::std::default::Default::default()
            }

            // bool name = 1;

            pub fn name(&self) -> bool {
                self.name
            }

            pub fn clear_name(&mut self) {
                self.name = false;
            }

            // Param is passed by value, moved
            pub fn set_name(&mut self, v: bool) {
                self.name = v;
            }

            // int64 value = 2;

            pub fn value(&self) -> i64 {
                self.value
            }

            pub fn clear_value(&mut self) {
                self.value = 0;
            }

            // Param is passed by value, moved
            pub fn set_value(&mut self, v: i64) {
                self.value = v;
            }

            // double probability = 3;

            pub fn probability(&self) -> f64 {
                self.probability
            }

            pub fn clear_probability(&mut self) {
                self.probability = 0.;
            }

            // Param is passed by value, moved
            pub fn set_probability(&mut self, v: f64) {
                self.probability = v;
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "name",
                    |m: &Point| { &m.name },
                    |m: &mut Point| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "value",
                    |m: &Point| { &m.value },
                    |m: &mut Point| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "probability",
                    |m: &Point| { &m.probability },
                    |m: &mut Point| { &mut m.probability },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Point>(
                    "Distribution.Boolean.Point",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Point {
            const NAME: &'static str = "Point";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.name = is.read_bool()?;
                        },
                        16 => {
                            self.value = is.read_int64()?;
                        },
                        25 => {
                            self.probability = is.read_double()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.name != false {
                    my_size += 1 + 1;
                }
                if self.value != 0 {
                    my_size += ::protobuf::rt::int64_size(2, self.value);
                }
                if self.probability != 0. {
                    my_size += 1 + 8;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.name != false {
                    os.write_bool(1, self.name)?;
                }
                if self.value != 0 {
                    os.write_int64(2, self.value)?;
                }
                if self.probability != 0. {
                    os.write_double(3, self.probability)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Point {
                Point::new()
            }

            fn clear(&mut self) {
                self.name = false;
                self.value = 0;
                self.probability = 0.;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Point {
                static instance: Point = Point {
                    name: false,
                    value: 0,
                    probability: 0.,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Point {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Distribution.Boolean.Point").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Point {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Point {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Distribution.Enum)
    pub struct Enum {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Enum.points)
        pub points: ::std::vec::Vec<enum_::Point>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Distribution.Enum.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Enum {
        fn default() -> &'a Enum {
            <Enum as ::protobuf::Message>::default_instance()
        }
    }

    impl Enum {
        pub fn new() -> Enum {
            ::std::default::Default::default()
        }

        // repeated .sarus_data_spec.Distribution.Enum.Point points = 1;

        pub fn points(&self) -> &[enum_::Point] {
            &self.points
        }

        pub fn clear_points(&mut self) {
            self.points.clear();
        }

        // Param is passed by value, moved
        pub fn set_points(&mut self, v: ::std::vec::Vec<enum_::Point>) {
            self.points = v;
        }

        // Mutable pointer to the field.
        pub fn mut_points(&mut self) -> &mut ::std::vec::Vec<enum_::Point> {
            &mut self.points
        }

        // Take field
        pub fn take_points(&mut self) -> ::std::vec::Vec<enum_::Point> {
            ::std::mem::replace(&mut self.points, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "points",
                |m: &Enum| { &m.points },
                |m: &mut Enum| { &mut m.points },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Enum>(
                "Distribution.Enum",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Enum {
        const NAME: &'static str = "Enum";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.points.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.points {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.points {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Enum {
            Enum::new()
        }

        fn clear(&mut self) {
            self.points.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Enum {
            static instance: Enum = Enum {
                points: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Enum {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Distribution.Enum").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Enum {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Enum {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Enum`
    pub mod enum_ {
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:sarus_data_spec.Distribution.Enum.Point)
        pub struct Point {
            // message fields
            // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Enum.Point.name)
            pub name: ::std::string::String,
            // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Enum.Point.value)
            pub value: f64,
            // @@protoc_insertion_point(field:sarus_data_spec.Distribution.Enum.Point.probability)
            pub probability: f64,
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Distribution.Enum.Point.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Point {
            fn default() -> &'a Point {
                <Point as ::protobuf::Message>::default_instance()
            }
        }

        impl Point {
            pub fn new() -> Point {
                ::std::default::Default::default()
            }

            // string name = 1;

            pub fn name(&self) -> &str {
                &self.name
            }

            pub fn clear_name(&mut self) {
                self.name.clear();
            }

            // Param is passed by value, moved
            pub fn set_name(&mut self, v: ::std::string::String) {
                self.name = v;
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_name(&mut self) -> &mut ::std::string::String {
                &mut self.name
            }

            // Take field
            pub fn take_name(&mut self) -> ::std::string::String {
                ::std::mem::replace(&mut self.name, ::std::string::String::new())
            }

            // double value = 2;

            pub fn value(&self) -> f64 {
                self.value
            }

            pub fn clear_value(&mut self) {
                self.value = 0.;
            }

            // Param is passed by value, moved
            pub fn set_value(&mut self, v: f64) {
                self.value = v;
            }

            // double probability = 3;

            pub fn probability(&self) -> f64 {
                self.probability
            }

            pub fn clear_probability(&mut self) {
                self.probability = 0.;
            }

            // Param is passed by value, moved
            pub fn set_probability(&mut self, v: f64) {
                self.probability = v;
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "name",
                    |m: &Point| { &m.name },
                    |m: &mut Point| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "value",
                    |m: &Point| { &m.value },
                    |m: &mut Point| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "probability",
                    |m: &Point| { &m.probability },
                    |m: &mut Point| { &mut m.probability },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Point>(
                    "Distribution.Enum.Point",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Point {
            const NAME: &'static str = "Point";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.name = is.read_string()?;
                        },
                        17 => {
                            self.value = is.read_double()?;
                        },
                        25 => {
                            self.probability = is.read_double()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.name.is_empty() {
                    my_size += ::protobuf::rt::string_size(1, &self.name);
                }
                if self.value != 0. {
                    my_size += 1 + 8;
                }
                if self.probability != 0. {
                    my_size += 1 + 8;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.name.is_empty() {
                    os.write_string(1, &self.name)?;
                }
                if self.value != 0. {
                    os.write_double(2, self.value)?;
                }
                if self.probability != 0. {
                    os.write_double(3, self.probability)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Point {
                Point::new()
            }

            fn clear(&mut self) {
                self.name.clear();
                self.value = 0.;
                self.probability = 0.;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Point {
                static instance: Point = Point {
                    name: ::std::string::String::new(),
                    value: 0.,
                    probability: 0.,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Point {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Distribution.Enum.Point").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Point {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Point {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)sarus_data_spec/protobuf/statistics.proto\x12\x0fsarus_data_spec\"\
    \x89\x1f\n\nStatistics\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    6\n\x04null\x18\x03\x20\x01(\x0b2\x20.sarus_data_spec.Statistics.NullH\0\
    R\x04null\x126\n\x04unit\x18\x04\x20\x01(\x0b2\x20.sarus_data_spec.Stati\
    stics.UnitH\0R\x04unit\x12?\n\x07boolean\x18\x05\x20\x01(\x0b2#.sarus_da\
    ta_spec.Statistics.BooleanH\0R\x07boolean\x12?\n\x07integer\x18\x06\x20\
    \x01(\x0b2#.sarus_data_spec.Statistics.IntegerH\0R\x07integer\x126\n\x04\
    enum\x18\x07\x20\x01(\x0b2\x20.sarus_data_spec.Statistics.EnumH\0R\x04en\
    um\x129\n\x05float\x18\x08\x20\x01(\x0b2!.sarus_data_spec.Statistics.Flo\
    atH\0R\x05float\x126\n\x04text\x18\t\x20\x01(\x0b2\x20.sarus_data_spec.S\
    tatistics.TextH\0R\x04text\x129\n\x05bytes\x18\n\x20\x01(\x0b2!.sarus_da\
    ta_spec.Statistics.BytesH\0R\x05bytes\x12<\n\x06struct\x18\x0b\x20\x01(\
    \x0b2\".sarus_data_spec.Statistics.StructH\0R\x06struct\x129\n\x05union\
    \x18\x0c\x20\x01(\x0b2!.sarus_data_spec.Statistics.UnionH\0R\x05union\
    \x12B\n\x08optional\x18\r\x20\x01(\x0b2$.sarus_data_spec.Statistics.Opti\
    onalH\0R\x08optional\x126\n\x04list\x18\x0e\x20\x01(\x0b2\x20.sarus_data\
    _spec.Statistics.ListH\0R\x04list\x129\n\x05array\x18\x0f\x20\x01(\x0b2!\
    .sarus_data_spec.Statistics.ArrayH\0R\x05array\x12B\n\x08datetime\x18\
    \x10\x20\x01(\x0b2$.sarus_data_spec.Statistics.DatetimeH\0R\x08datetime\
    \x120\n\x02id\x18\x11\x20\x01(\x0b2\x1e.sarus_data_spec.Statistics.IdH\0\
    R\x02id\x12K\n\x0bconstrained\x18\x12\x20\x01(\x0b2'.sarus_data_spec.Sta\
    tistics.ConstrainedH\0R\x0bconstrained\x126\n\x04date\x18\x13\x20\x01(\
    \x0b2\x20.sarus_data_spec.Statistics.DateH\0R\x04date\x126\n\x04time\x18\
    \x14\x20\x01(\x0b2\x20.sarus_data_spec.Statistics.TimeH\0R\x04time\x12B\
    \n\x08duration\x18\x15\x20\x01(\x0b2$.sarus_data_spec.Statistics.Duratio\
    nH\0R\x08duration\x12K\n\nproperties\x18\x02\x20\x03(\x0b2+.sarus_data_s\
    pec.Statistics.PropertiesEntryR\nproperties\x1a=\n\x0fPropertiesEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01\x1a>\n\x04Null\x12\x12\n\x04size\x18\x01\
    \x20\x01(\x03R\x04size\x12\"\n\x0cmultiplicity\x18\x02\x20\x01(\x01R\x0c\
    multiplicity\x1a>\n\x04Unit\x12\x12\n\x04size\x18\x01\x20\x01(\x03R\x04s\
    ize\x12\"\n\x0cmultiplicity\x18\x02\x20\x01(\x01R\x0cmultiplicity\x1a\
    \x84\x01\n\x07Boolean\x12A\n\x0cdistribution\x18\x01\x20\x01(\x0b2\x1d.s\
    arus_data_spec.DistributionR\x0cdistribution\x12\x12\n\x04size\x18\x02\
    \x20\x01(\x03R\x04size\x12\"\n\x0cmultiplicity\x18\x03\x20\x01(\x01R\x0c\
    multiplicity\x1a<\n\x02Id\x12\x12\n\x04size\x18\x01\x20\x01(\x03R\x04siz\
    e\x12\"\n\x0cmultiplicity\x18\x02\x20\x01(\x01R\x0cmultiplicity\x1a\x84\
    \x01\n\x07Integer\x12A\n\x0cdistribution\x18\x01\x20\x01(\x0b2\x1d.sarus\
    _data_spec.DistributionR\x0cdistribution\x12\x12\n\x04size\x18\x02\x20\
    \x01(\x03R\x04size\x12\"\n\x0cmultiplicity\x18\x03\x20\x01(\x01R\x0cmult\
    iplicity\x1a\x81\x01\n\x04Enum\x12A\n\x0cdistribution\x18\x01\x20\x01(\
    \x0b2\x1d.sarus_data_spec.DistributionR\x0cdistribution\x12\x12\n\x04siz\
    e\x18\x02\x20\x01(\x03R\x04size\x12\"\n\x0cmultiplicity\x18\x03\x20\x01(\
    \x01R\x0cmultiplicity\x1a\x82\x01\n\x05Float\x12A\n\x0cdistribution\x18\
    \x01\x20\x01(\x0b2\x1d.sarus_data_spec.DistributionR\x0cdistribution\x12\
    \x12\n\x04size\x18\x02\x20\x01(\x03R\x04size\x12\"\n\x0cmultiplicity\x18\
    \x03\x20\x01(\x01R\x0cmultiplicity\x1a\x9b\x01\n\x04Text\x12A\n\x0cdistr\
    ibution\x18\x01\x20\x01(\x0b2\x1d.sarus_data_spec.DistributionR\x0cdistr\
    ibution\x12\x18\n\x07example\x18\x02\x20\x01(\tR\x07example\x12\x12\n\
    \x04size\x18\x03\x20\x01(\x03R\x04size\x12\"\n\x0cmultiplicity\x18\x04\
    \x20\x01(\x01R\x0cmultiplicity\x1a?\n\x05Bytes\x12\x12\n\x04size\x18\x01\
    \x20\x01(\x03R\x04size\x12\"\n\x0cmultiplicity\x18\x02\x20\x01(\x01R\x0c\
    multiplicity\x1a\xf0\x01\n\x06Struct\x12@\n\x06fields\x18\x01\x20\x03(\
    \x0b2(.sarus_data_spec.Statistics.Struct.FieldR\x06fields\x12\x12\n\x04s\
    ize\x18\x02\x20\x01(\x03R\x04size\x12\x12\n\x04name\x18\x03\x20\x01(\tR\
    \x04name\x12\"\n\x0cmultiplicity\x18\x04\x20\x01(\x01R\x0cmultiplicity\
    \x1aX\n\x05Field\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12;\n\ns\
    tatistics\x18\x02\x20\x01(\x0b2\x1b.sarus_data_spec.StatisticsR\nstatist\
    ics\x1a\xee\x01\n\x05Union\x12?\n\x06fields\x18\x01\x20\x03(\x0b2'.sarus\
    _data_spec.Statistics.Union.FieldR\x06fields\x12\x12\n\x04size\x18\x02\
    \x20\x01(\x03R\x04size\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\
    \"\n\x0cmultiplicity\x18\x04\x20\x01(\x01R\x0cmultiplicity\x1aX\n\x05Fie\
    ld\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12;\n\nstatistics\x18\
    \x02\x20\x01(\x0b2\x1b.sarus_data_spec.StatisticsR\nstatistics\x1a\x93\
    \x01\n\x08Optional\x12;\n\nstatistics\x18\x01\x20\x01(\x0b2\x1b.sarus_da\
    ta_spec.StatisticsR\nstatistics\x12\x12\n\x04size\x18\x02\x20\x01(\x03R\
    \x04size\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\"\n\x0cmultip\
    licity\x18\x04\x20\x01(\x01R\x0cmultiplicity\x1a\xbe\x01\n\x04List\x12;\
    \n\nstatistics\x18\x01\x20\x01(\x0b2\x1b.sarus_data_spec.StatisticsR\nst\
    atistics\x12A\n\x0cdistribution\x18\x02\x20\x01(\x0b2\x1d.sarus_data_spe\
    c.DistributionR\x0cdistribution\x12\x12\n\x04size\x18\x03\x20\x01(\x03R\
    \x04size\x12\"\n\x0cmultiplicity\x18\x04\x20\x01(\x01R\x0cmultiplicity\
    \x1a\xc1\x01\n\x05Array\x12;\n\nstatistics\x18\x01\x20\x01(\x0b2\x1b.sar\
    us_data_spec.StatisticsR\nstatistics\x12C\n\rdistributions\x18\x02\x20\
    \x03(\x0b2\x1d.sarus_data_spec.DistributionR\rdistributions\x12\x12\n\
    \x04size\x18\x03\x20\x01(\x03R\x04size\x12\"\n\x0cmultiplicity\x18\x04\
    \x20\x01(\x01R\x0cmultiplicity\x1a\x85\x01\n\x08Datetime\x12A\n\x0cdistr\
    ibution\x18\x01\x20\x01(\x0b2\x1d.sarus_data_spec.DistributionR\x0cdistr\
    ibution\x12\x12\n\x04size\x18\x02\x20\x01(\x03R\x04size\x12\"\n\x0cmulti\
    plicity\x18\x03\x20\x01(\x01R\x0cmultiplicity\x1a\x81\x01\n\x04Date\x12A\
    \n\x0cdistribution\x18\x01\x20\x01(\x0b2\x1d.sarus_data_spec.Distributio\
    nR\x0cdistribution\x12\x12\n\x04size\x18\x02\x20\x01(\x03R\x04size\x12\"\
    \n\x0cmultiplicity\x18\x03\x20\x01(\x01R\x0cmultiplicity\x1a\x81\x01\n\
    \x04Time\x12A\n\x0cdistribution\x18\x01\x20\x01(\x0b2\x1d.sarus_data_spe\
    c.DistributionR\x0cdistribution\x12\x12\n\x04size\x18\x02\x20\x01(\x03R\
    \x04size\x12\"\n\x0cmultiplicity\x18\x03\x20\x01(\x01R\x0cmultiplicity\
    \x1a\x85\x01\n\x08Duration\x12A\n\x0cdistribution\x18\x01\x20\x01(\x0b2\
    \x1d.sarus_data_spec.DistributionR\x0cdistribution\x12\x12\n\x04size\x18\
    \x02\x20\x01(\x03R\x04size\x12\"\n\x0cmultiplicity\x18\x03\x20\x01(\x01R\
    \x0cmultiplicity\x1a\x82\x01\n\x0bConstrained\x12;\n\nstatistics\x18\x01\
    \x20\x01(\x0b2\x1b.sarus_data_spec.StatisticsR\nstatistics\x12\x12\n\x04\
    size\x18\x02\x20\x01(\x03R\x04size\x12\"\n\x0cmultiplicity\x18\x03\x20\
    \x01(\x01R\x0cmultiplicityB\x0c\n\nstatistics\"\xdc\x08\n\x0cDistributio\
    n\x12>\n\x06double\x18\x01\x20\x01(\x0b2$.sarus_data_spec.Distribution.D\
    oubleH\0R\x06double\x12A\n\x07integer\x18\x02\x20\x01(\x0b2%.sarus_data_\
    spec.Distribution.IntegerH\0R\x07integer\x12A\n\x07boolean\x18\x03\x20\
    \x01(\x0b2%.sarus_data_spec.Distribution.BooleanH\0R\x07boolean\x128\n\
    \x04enum\x18\x04\x20\x01(\x0b2\".sarus_data_spec.Distribution.EnumH\0R\
    \x04enum\x12M\n\nproperties\x18\x05\x20\x03(\x0b2-.sarus_data_spec.Distr\
    ibution.PropertiesEntryR\nproperties\x1a=\n\x0fPropertiesEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\x1a\xb1\x01\n\x06Double\x12B\n\x06points\x18\x01\
    \x20\x03(\x0b2*.sarus_data_spec.Distribution.Double.PointR\x06points\x12\
    \x10\n\x03min\x18\x02\x20\x01(\x01R\x03min\x12\x10\n\x03max\x18\x03\x20\
    \x01(\x01R\x03max\x1a?\n\x05Point\x12\x14\n\x05value\x18\x02\x20\x01(\
    \x01R\x05value\x12\x20\n\x0bprobability\x18\x03\x20\x01(\x01R\x0bprobabi\
    lity\x1a\xb3\x01\n\x07Integer\x12C\n\x06points\x18\x01\x20\x03(\x0b2+.sa\
    rus_data_spec.Distribution.Integer.PointR\x06points\x12\x10\n\x03min\x18\
    \x02\x20\x01(\x03R\x03min\x12\x10\n\x03max\x18\x03\x20\x01(\x03R\x03max\
    \x1a?\n\x05Point\x12\x14\n\x05value\x18\x01\x20\x01(\x03R\x05value\x12\
    \x20\n\x0bprobability\x18\x02\x20\x01(\x01R\x0bprobability\x1a\xa3\x01\n\
    \x07Boolean\x12C\n\x06points\x18\x01\x20\x03(\x0b2+.sarus_data_spec.Dist\
    ribution.Boolean.PointR\x06points\x1aS\n\x05Point\x12\x12\n\x04name\x18\
    \x01\x20\x01(\x08R\x04name\x12\x14\n\x05value\x18\x02\x20\x01(\x03R\x05v\
    alue\x12\x20\n\x0bprobability\x18\x03\x20\x01(\x01R\x0bprobability\x1a\
    \x9d\x01\n\x04Enum\x12@\n\x06points\x18\x01\x20\x03(\x0b2(.sarus_data_sp\
    ec.Distribution.Enum.PointR\x06points\x1aS\n\x05Point\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05value\x18\x02\x20\x01(\x01R\
    \x05value\x12\x20\n\x0bprobability\x18\x03\x20\x01(\x01R\x0bprobabilityB\
    \x0e\n\x0cdistributionb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(31);
            messages.push(Statistics::generated_message_descriptor_data());
            messages.push(Distribution::generated_message_descriptor_data());
            messages.push(statistics::Null::generated_message_descriptor_data());
            messages.push(statistics::Unit::generated_message_descriptor_data());
            messages.push(statistics::Boolean::generated_message_descriptor_data());
            messages.push(statistics::Id::generated_message_descriptor_data());
            messages.push(statistics::Integer::generated_message_descriptor_data());
            messages.push(statistics::Enum::generated_message_descriptor_data());
            messages.push(statistics::Float::generated_message_descriptor_data());
            messages.push(statistics::Text::generated_message_descriptor_data());
            messages.push(statistics::Bytes::generated_message_descriptor_data());
            messages.push(statistics::Struct::generated_message_descriptor_data());
            messages.push(statistics::Union::generated_message_descriptor_data());
            messages.push(statistics::Optional::generated_message_descriptor_data());
            messages.push(statistics::List::generated_message_descriptor_data());
            messages.push(statistics::Array::generated_message_descriptor_data());
            messages.push(statistics::Datetime::generated_message_descriptor_data());
            messages.push(statistics::Date::generated_message_descriptor_data());
            messages.push(statistics::Time::generated_message_descriptor_data());
            messages.push(statistics::Duration::generated_message_descriptor_data());
            messages.push(statistics::Constrained::generated_message_descriptor_data());
            messages.push(statistics::struct_::Field::generated_message_descriptor_data());
            messages.push(statistics::union::Field::generated_message_descriptor_data());
            messages.push(distribution::Double::generated_message_descriptor_data());
            messages.push(distribution::Integer::generated_message_descriptor_data());
            messages.push(distribution::Boolean::generated_message_descriptor_data());
            messages.push(distribution::Enum::generated_message_descriptor_data());
            messages.push(distribution::double::Point::generated_message_descriptor_data());
            messages.push(distribution::integer::Point::generated_message_descriptor_data());
            messages.push(distribution::boolean::Point::generated_message_descriptor_data());
            messages.push(distribution::enum_::Point::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
