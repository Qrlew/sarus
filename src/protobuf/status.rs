// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sarus_data_spec/protobuf/status.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:sarus_data_spec.Status)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Status {
    // message fields
    // @@protoc_insertion_point(field:sarus_data_spec.Status.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Status.dataspec)
    pub dataspec: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Status.manager)
    pub manager: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Status.datetime)
    pub datetime: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Status.task_stages)
    pub task_stages: ::std::collections::HashMap<::std::string::String, status::Stage>,
    // @@protoc_insertion_point(field:sarus_data_spec.Status.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:sarus_data_spec.Status.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Status {
    fn default() -> &'a Status {
        <Status as ::protobuf::Message>::default_instance()
    }
}

impl Status {
    pub fn new() -> Status {
        ::std::default::Default::default()
    }

    // string uuid = 1;

    pub fn uuid(&self) -> &str {
        &self.uuid
    }

    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // string dataspec = 2;

    pub fn dataspec(&self) -> &str {
        &self.dataspec
    }

    pub fn clear_dataspec(&mut self) {
        self.dataspec.clear();
    }

    // Param is passed by value, moved
    pub fn set_dataspec(&mut self, v: ::std::string::String) {
        self.dataspec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataspec(&mut self) -> &mut ::std::string::String {
        &mut self.dataspec
    }

    // Take field
    pub fn take_dataspec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dataspec, ::std::string::String::new())
    }

    // string manager = 3;

    pub fn manager(&self) -> &str {
        &self.manager
    }

    pub fn clear_manager(&mut self) {
        self.manager.clear();
    }

    // Param is passed by value, moved
    pub fn set_manager(&mut self, v: ::std::string::String) {
        self.manager = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manager(&mut self) -> &mut ::std::string::String {
        &mut self.manager
    }

    // Take field
    pub fn take_manager(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manager, ::std::string::String::new())
    }

    // string datetime = 4;

    pub fn datetime(&self) -> &str {
        &self.datetime
    }

    pub fn clear_datetime(&mut self) {
        self.datetime.clear();
    }

    // Param is passed by value, moved
    pub fn set_datetime(&mut self, v: ::std::string::String) {
        self.datetime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_datetime(&mut self) -> &mut ::std::string::String {
        &mut self.datetime
    }

    // Take field
    pub fn take_datetime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.datetime, ::std::string::String::new())
    }

    // repeated .sarus_data_spec.Status.TaskStagesEntry task_stages = 5;

    pub fn task_stages(&self) -> &::std::collections::HashMap<::std::string::String, status::Stage> {
        &self.task_stages
    }

    pub fn clear_task_stages(&mut self) {
        self.task_stages.clear();
    }

    // Param is passed by value, moved
    pub fn set_task_stages(&mut self, v: ::std::collections::HashMap<::std::string::String, status::Stage>) {
        self.task_stages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_task_stages(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, status::Stage> {
        &mut self.task_stages
    }

    // Take field
    pub fn take_task_stages(&mut self) -> ::std::collections::HashMap<::std::string::String, status::Stage> {
        ::std::mem::replace(&mut self.task_stages, ::std::collections::HashMap::new())
    }

    // repeated .sarus_data_spec.Status.PropertiesEntry properties = 6;

    pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.properties
    }

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &Status| { &m.uuid },
            |m: &mut Status| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dataspec",
            |m: &Status| { &m.dataspec },
            |m: &mut Status| { &mut m.dataspec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "manager",
            |m: &Status| { &m.manager },
            |m: &mut Status| { &mut m.manager },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "datetime",
            |m: &Status| { &m.datetime },
            |m: &mut Status| { &mut m.datetime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "task_stages",
            |m: &Status| { &m.task_stages },
            |m: &mut Status| { &mut m.task_stages },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &Status| { &m.properties },
            |m: &mut Status| { &mut m.properties },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Status>(
            "Status",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Status {
    const NAME: &'static str = "Status";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uuid = is.read_string()?;
                },
                18 => {
                    self.dataspec = is.read_string()?;
                },
                26 => {
                    self.manager = is.read_string()?;
                },
                34 => {
                    self.datetime = is.read_string()?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.task_stages.insert(key, value);
                },
                50 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if !self.dataspec.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.dataspec);
        }
        if !self.manager.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.manager);
        }
        if !self.datetime.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.datetime);
        }
        for (k, v) in &self.task_stages {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if !self.dataspec.is_empty() {
            os.write_string(2, &self.dataspec)?;
        }
        if !self.manager.is_empty() {
            os.write_string(3, &self.manager)?;
        }
        if !self.datetime.is_empty() {
            os.write_string(4, &self.datetime)?;
        }
        for (k, v) in &self.task_stages {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(50)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Status {
        Status::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.dataspec.clear();
        self.manager.clear();
        self.datetime.clear();
        self.task_stages.clear();
        self.properties.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Status {
        static instance: ::protobuf::rt::Lazy<Status> = ::protobuf::rt::Lazy::new();
        instance.get(Status::new)
    }
}

impl ::protobuf::MessageFull for Status {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Status").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Status`
pub mod status {
    // @@protoc_insertion_point(message:sarus_data_spec.Status.Stage)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Stage {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Status.Stage.properties)
        pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        // message oneof groups
        pub stage: ::std::option::Option<stage::Stage>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Status.Stage.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Stage {
        fn default() -> &'a Stage {
            <Stage as ::protobuf::Message>::default_instance()
        }
    }

    impl Stage {
        pub fn new() -> Stage {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Status.Stage.Pending pending = 1;

        pub fn pending(&self) -> &stage::Pending {
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Pending(ref v)) => v,
                _ => <stage::Pending as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_pending(&mut self) {
            self.stage = ::std::option::Option::None;
        }

        pub fn has_pending(&self) -> bool {
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Pending(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_pending(&mut self, v: stage::Pending) {
            self.stage = ::std::option::Option::Some(stage::Stage::Pending(v))
        }

        // Mutable pointer to the field.
        pub fn mut_pending(&mut self) -> &mut stage::Pending {
            if let ::std::option::Option::Some(stage::Stage::Pending(_)) = self.stage {
            } else {
                self.stage = ::std::option::Option::Some(stage::Stage::Pending(stage::Pending::new()));
            }
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Pending(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_pending(&mut self) -> stage::Pending {
            if self.has_pending() {
                match self.stage.take() {
                    ::std::option::Option::Some(stage::Stage::Pending(v)) => v,
                    _ => panic!(),
                }
            } else {
                stage::Pending::new()
            }
        }

        // .sarus_data_spec.Status.Stage.Processing processing = 2;

        pub fn processing(&self) -> &stage::Processing {
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Processing(ref v)) => v,
                _ => <stage::Processing as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_processing(&mut self) {
            self.stage = ::std::option::Option::None;
        }

        pub fn has_processing(&self) -> bool {
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Processing(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_processing(&mut self, v: stage::Processing) {
            self.stage = ::std::option::Option::Some(stage::Stage::Processing(v))
        }

        // Mutable pointer to the field.
        pub fn mut_processing(&mut self) -> &mut stage::Processing {
            if let ::std::option::Option::Some(stage::Stage::Processing(_)) = self.stage {
            } else {
                self.stage = ::std::option::Option::Some(stage::Stage::Processing(stage::Processing::new()));
            }
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Processing(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_processing(&mut self) -> stage::Processing {
            if self.has_processing() {
                match self.stage.take() {
                    ::std::option::Option::Some(stage::Stage::Processing(v)) => v,
                    _ => panic!(),
                }
            } else {
                stage::Processing::new()
            }
        }

        // .sarus_data_spec.Status.Stage.Ready ready = 3;

        pub fn ready(&self) -> &stage::Ready {
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Ready(ref v)) => v,
                _ => <stage::Ready as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_ready(&mut self) {
            self.stage = ::std::option::Option::None;
        }

        pub fn has_ready(&self) -> bool {
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Ready(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_ready(&mut self, v: stage::Ready) {
            self.stage = ::std::option::Option::Some(stage::Stage::Ready(v))
        }

        // Mutable pointer to the field.
        pub fn mut_ready(&mut self) -> &mut stage::Ready {
            if let ::std::option::Option::Some(stage::Stage::Ready(_)) = self.stage {
            } else {
                self.stage = ::std::option::Option::Some(stage::Stage::Ready(stage::Ready::new()));
            }
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Ready(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_ready(&mut self) -> stage::Ready {
            if self.has_ready() {
                match self.stage.take() {
                    ::std::option::Option::Some(stage::Stage::Ready(v)) => v,
                    _ => panic!(),
                }
            } else {
                stage::Ready::new()
            }
        }

        // .sarus_data_spec.Status.Stage.Error error = 4;

        pub fn error(&self) -> &stage::Error {
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Error(ref v)) => v,
                _ => <stage::Error as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_error(&mut self) {
            self.stage = ::std::option::Option::None;
        }

        pub fn has_error(&self) -> bool {
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Error(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_error(&mut self, v: stage::Error) {
            self.stage = ::std::option::Option::Some(stage::Stage::Error(v))
        }

        // Mutable pointer to the field.
        pub fn mut_error(&mut self) -> &mut stage::Error {
            if let ::std::option::Option::Some(stage::Stage::Error(_)) = self.stage {
            } else {
                self.stage = ::std::option::Option::Some(stage::Stage::Error(stage::Error::new()));
            }
            match self.stage {
                ::std::option::Option::Some(stage::Stage::Error(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_error(&mut self) -> stage::Error {
            if self.has_error() {
                match self.stage.take() {
                    ::std::option::Option::Some(stage::Stage::Error(v)) => v,
                    _ => panic!(),
                }
            } else {
                stage::Error::new()
            }
        }

        // repeated .sarus_data_spec.Status.Stage.PropertiesEntry properties = 5;

        pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
            &self.properties
        }

        pub fn clear_properties(&mut self) {
            self.properties.clear();
        }

        // Param is passed by value, moved
        pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
            self.properties = v;
        }

        // Mutable pointer to the field.
        pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
            &mut self.properties
        }

        // Take field
        pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
            ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, stage::Pending>(
                "pending",
                Stage::has_pending,
                Stage::pending,
                Stage::mut_pending,
                Stage::set_pending,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, stage::Processing>(
                "processing",
                Stage::has_processing,
                Stage::processing,
                Stage::mut_processing,
                Stage::set_processing,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, stage::Ready>(
                "ready",
                Stage::has_ready,
                Stage::ready,
                Stage::mut_ready,
                Stage::set_ready,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, stage::Error>(
                "error",
                Stage::has_error,
                Stage::error,
                Stage::mut_error,
                Stage::set_error,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
                "properties",
                |m: &Stage| { &m.properties },
                |m: &mut Stage| { &mut m.properties },
            ));
            oneofs.push(stage::Stage::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Stage>(
                "Status.Stage",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Stage {
        const NAME: &'static str = "Stage";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.stage = ::std::option::Option::Some(stage::Stage::Pending(is.read_message()?));
                    },
                    18 => {
                        self.stage = ::std::option::Option::Some(stage::Stage::Processing(is.read_message()?));
                    },
                    26 => {
                        self.stage = ::std::option::Option::Some(stage::Stage::Ready(is.read_message()?));
                    },
                    34 => {
                        self.stage = ::std::option::Option::Some(stage::Stage::Error(is.read_message()?));
                    },
                    42 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                18 => value = is.read_string()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.properties.insert(key, value);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for (k, v) in &self.properties {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            if let ::std::option::Option::Some(ref v) = self.stage {
                match v {
                    &stage::Stage::Pending(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &stage::Stage::Processing(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &stage::Stage::Ready(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &stage::Stage::Error(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for (k, v) in &self.properties {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                os.write_raw_varint32(42)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                os.write_string(2, &v)?;
            };
            if let ::std::option::Option::Some(ref v) = self.stage {
                match v {
                    &stage::Stage::Pending(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &stage::Stage::Processing(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                    &stage::Stage::Ready(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    },
                    &stage::Stage::Error(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Stage {
            Stage::new()
        }

        fn clear(&mut self) {
            self.stage = ::std::option::Option::None;
            self.stage = ::std::option::Option::None;
            self.stage = ::std::option::Option::None;
            self.stage = ::std::option::Option::None;
            self.properties.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Stage {
            static instance: ::protobuf::rt::Lazy<Stage> = ::protobuf::rt::Lazy::new();
            instance.get(Stage::new)
        }
    }

    impl ::protobuf::MessageFull for Stage {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Status.Stage").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Stage {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Stage {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Stage`
    pub mod stage {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:sarus_data_spec.Status.Stage.stage)
        pub enum Stage {
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Status.Stage.pending)
            Pending(Pending),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Status.Stage.processing)
            Processing(Processing),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Status.Stage.ready)
            Ready(Ready),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Status.Stage.error)
            Error(Error),
        }

        impl ::protobuf::Oneof for Stage {
        }

        impl ::protobuf::OneofFull for Stage {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Stage as ::protobuf::MessageFull>::descriptor().oneof_by_name("stage").unwrap()).clone()
            }
        }

        impl Stage {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Stage>("stage")
            }
        }
        // @@protoc_insertion_point(message:sarus_data_spec.Status.Stage.Pending)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Pending {
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Status.Stage.Pending.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Pending {
            fn default() -> &'a Pending {
                <Pending as ::protobuf::Message>::default_instance()
            }
        }

        impl Pending {
            pub fn new() -> Pending {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(0);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Pending>(
                    "Status.Stage.Pending",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Pending {
            const NAME: &'static str = "Pending";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Pending {
                Pending::new()
            }

            fn clear(&mut self) {
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Pending {
                static instance: Pending = Pending {
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Pending {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Status.Stage.Pending").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Pending {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Pending {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:sarus_data_spec.Status.Stage.Processing)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Processing {
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Status.Stage.Processing.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Processing {
            fn default() -> &'a Processing {
                <Processing as ::protobuf::Message>::default_instance()
            }
        }

        impl Processing {
            pub fn new() -> Processing {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(0);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Processing>(
                    "Status.Stage.Processing",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Processing {
            const NAME: &'static str = "Processing";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Processing {
                Processing::new()
            }

            fn clear(&mut self) {
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Processing {
                static instance: Processing = Processing {
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Processing {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Status.Stage.Processing").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Processing {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Processing {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:sarus_data_spec.Status.Stage.Ready)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Ready {
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Status.Stage.Ready.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Ready {
            fn default() -> &'a Ready {
                <Ready as ::protobuf::Message>::default_instance()
            }
        }

        impl Ready {
            pub fn new() -> Ready {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(0);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Ready>(
                    "Status.Stage.Ready",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Ready {
            const NAME: &'static str = "Ready";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Ready {
                Ready::new()
            }

            fn clear(&mut self) {
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Ready {
                static instance: Ready = Ready {
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Ready {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Status.Stage.Ready").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Ready {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Ready {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:sarus_data_spec.Status.Stage.Error)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Error {
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Status.Stage.Error.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Error {
            fn default() -> &'a Error {
                <Error as ::protobuf::Message>::default_instance()
            }
        }

        impl Error {
            pub fn new() -> Error {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(0);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Error>(
                    "Status.Stage.Error",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Error {
            const NAME: &'static str = "Error";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Error {
                Error::new()
            }

            fn clear(&mut self) {
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Error {
                static instance: Error = Error {
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Error {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Status.Stage.Error").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Error {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%sarus_data_spec/protobuf/status.proto\x12\x0fsarus_data_spec\"\xf3\
    \x06\n\x06Status\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuid\x12\x1a\n\
    \x08dataspec\x18\x02\x20\x01(\tR\x08dataspec\x12\x18\n\x07manager\x18\
    \x03\x20\x01(\tR\x07manager\x12\x1a\n\x08datetime\x18\x04\x20\x01(\tR\
    \x08datetime\x12H\n\x0btask_stages\x18\x05\x20\x03(\x0b2'.sarus_data_spe\
    c.Status.TaskStagesEntryR\ntaskStages\x12G\n\nproperties\x18\x06\x20\x03\
    (\x0b2'.sarus_data_spec.Status.PropertiesEntryR\nproperties\x1a\\\n\x0fT\
    askStagesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x123\n\x05val\
    ue\x18\x02\x20\x01(\x0b2\x1d.sarus_data_spec.Status.StageR\x05value:\x02\
    8\x01\x1a=\n\x0fPropertiesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03\
    key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1a\xd2\
    \x03\n\x05Stage\x12A\n\x07pending\x18\x01\x20\x01(\x0b2%.sarus_data_spec\
    .Status.Stage.PendingH\0R\x07pending\x12J\n\nprocessing\x18\x02\x20\x01(\
    \x0b2(.sarus_data_spec.Status.Stage.ProcessingH\0R\nprocessing\x12;\n\
    \x05ready\x18\x03\x20\x01(\x0b2#.sarus_data_spec.Status.Stage.ReadyH\0R\
    \x05ready\x12;\n\x05error\x18\x04\x20\x01(\x0b2#.sarus_data_spec.Status.\
    Stage.ErrorH\0R\x05error\x12M\n\nproperties\x18\x05\x20\x03(\x0b2-.sarus\
    _data_spec.Status.Stage.PropertiesEntryR\nproperties\x1a=\n\x0fPropertie\
    sEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01\x1a\t\n\x07Pending\x1a\x0c\n\nPr\
    ocessing\x1a\x07\n\x05Ready\x1a\x07\n\x05ErrorB\x07\n\x05stageb\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(Status::generated_message_descriptor_data());
            messages.push(status::Stage::generated_message_descriptor_data());
            messages.push(status::stage::Pending::generated_message_descriptor_data());
            messages.push(status::stage::Processing::generated_message_descriptor_data());
            messages.push(status::stage::Ready::generated_message_descriptor_data());
            messages.push(status::stage::Error::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
