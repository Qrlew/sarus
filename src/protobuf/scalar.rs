// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sarus_data_spec/protobuf/scalar.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:sarus_data_spec.Scalar)
pub struct Scalar {
    // message fields
    // @@protoc_insertion_point(field:sarus_data_spec.Scalar.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Scalar.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Scalar.doc)
    pub doc: ::std::string::String,
    // @@protoc_insertion_point(field:sarus_data_spec.Scalar.spec)
    pub spec: ::protobuf::MessageField<scalar::Spec>,
    // @@protoc_insertion_point(field:sarus_data_spec.Scalar.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:sarus_data_spec.Scalar.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Scalar {
    fn default() -> &'a Scalar {
        <Scalar as ::protobuf::Message>::default_instance()
    }
}

impl Scalar {
    pub fn new() -> Scalar {
        ::std::default::Default::default()
    }

    // string uuid = 1;

    pub fn uuid(&self) -> &str {
        &self.uuid
    }

    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // string name = 2;

    pub fn name(&self) -> &str {
        &self.name
    }

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string doc = 3;

    pub fn doc(&self) -> &str {
        &self.doc
    }

    pub fn clear_doc(&mut self) {
        self.doc.clear();
    }

    // Param is passed by value, moved
    pub fn set_doc(&mut self, v: ::std::string::String) {
        self.doc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_doc(&mut self) -> &mut ::std::string::String {
        &mut self.doc
    }

    // Take field
    pub fn take_doc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.doc, ::std::string::String::new())
    }

    // .sarus_data_spec.Scalar.Spec spec = 4;

    pub fn spec(&self) -> &scalar::Spec {
        self.spec.as_ref().unwrap_or_else(|| <scalar::Spec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: scalar::Spec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut scalar::Spec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> scalar::Spec {
        self.spec.take().unwrap_or_else(|| scalar::Spec::new())
    }

    // repeated .sarus_data_spec.Scalar.PropertiesEntry properties = 5;

    pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.properties
    }

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &Scalar| { &m.uuid },
            |m: &mut Scalar| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Scalar| { &m.name },
            |m: &mut Scalar| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "doc",
            |m: &Scalar| { &m.doc },
            |m: &mut Scalar| { &mut m.doc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, scalar::Spec>(
            "spec",
            |m: &Scalar| { &m.spec },
            |m: &mut Scalar| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &Scalar| { &m.properties },
            |m: &mut Scalar| { &mut m.properties },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Scalar>(
            "Scalar",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Scalar {
    const NAME: &'static str = "Scalar";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uuid = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.doc = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.doc.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.doc);
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.doc.is_empty() {
            os.write_string(3, &self.doc)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Scalar {
        Scalar::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.name.clear();
        self.doc.clear();
        self.spec.clear();
        self.properties.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Scalar {
        static instance: ::protobuf::rt::Lazy<Scalar> = ::protobuf::rt::Lazy::new();
        instance.get(Scalar::new)
    }
}

impl ::protobuf::MessageFull for Scalar {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Scalar").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Scalar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Scalar {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Scalar`
pub mod scalar {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Scalar.Spec)
    pub struct Spec {
        // message oneof groups
        pub spec: ::std::option::Option<spec::Spec>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Scalar.Spec.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Spec {
        fn default() -> &'a Spec {
            <Spec as ::protobuf::Message>::default_instance()
        }
    }

    impl Spec {
        pub fn new() -> Spec {
            ::std::default::Default::default()
        }

        // .sarus_data_spec.Scalar.Transformed transformed = 1;

        pub fn transformed(&self) -> &Transformed {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Transformed(ref v)) => v,
                _ => <Transformed as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_transformed(&mut self) {
            self.spec = ::std::option::Option::None;
        }

        pub fn has_transformed(&self) -> bool {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Transformed(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_transformed(&mut self, v: Transformed) {
            self.spec = ::std::option::Option::Some(spec::Spec::Transformed(v))
        }

        // Mutable pointer to the field.
        pub fn mut_transformed(&mut self) -> &mut Transformed {
            if let ::std::option::Option::Some(spec::Spec::Transformed(_)) = self.spec {
            } else {
                self.spec = ::std::option::Option::Some(spec::Spec::Transformed(Transformed::new()));
            }
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Transformed(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_transformed(&mut self) -> Transformed {
            if self.has_transformed() {
                match self.spec.take() {
                    ::std::option::Option::Some(spec::Spec::Transformed(v)) => v,
                    _ => panic!(),
                }
            } else {
                Transformed::new()
            }
        }

        // .sarus_data_spec.Scalar.Model model = 2;

        pub fn model(&self) -> &Model {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Model(ref v)) => v,
                _ => <Model as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_model(&mut self) {
            self.spec = ::std::option::Option::None;
        }

        pub fn has_model(&self) -> bool {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Model(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_model(&mut self, v: Model) {
            self.spec = ::std::option::Option::Some(spec::Spec::Model(v))
        }

        // Mutable pointer to the field.
        pub fn mut_model(&mut self) -> &mut Model {
            if let ::std::option::Option::Some(spec::Spec::Model(_)) = self.spec {
            } else {
                self.spec = ::std::option::Option::Some(spec::Spec::Model(Model::new()));
            }
            match self.spec {
                ::std::option::Option::Some(spec::Spec::Model(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_model(&mut self) -> Model {
            if self.has_model() {
                match self.spec.take() {
                    ::std::option::Option::Some(spec::Spec::Model(v)) => v,
                    _ => panic!(),
                }
            } else {
                Model::new()
            }
        }

        // .sarus_data_spec.Scalar.PrivacyParameters privacy_params = 3;

        pub fn privacy_params(&self) -> &PrivacyParameters {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::PrivacyParams(ref v)) => v,
                _ => <PrivacyParameters as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_privacy_params(&mut self) {
            self.spec = ::std::option::Option::None;
        }

        pub fn has_privacy_params(&self) -> bool {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::PrivacyParams(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_privacy_params(&mut self, v: PrivacyParameters) {
            self.spec = ::std::option::Option::Some(spec::Spec::PrivacyParams(v))
        }

        // Mutable pointer to the field.
        pub fn mut_privacy_params(&mut self) -> &mut PrivacyParameters {
            if let ::std::option::Option::Some(spec::Spec::PrivacyParams(_)) = self.spec {
            } else {
                self.spec = ::std::option::Option::Some(spec::Spec::PrivacyParams(PrivacyParameters::new()));
            }
            match self.spec {
                ::std::option::Option::Some(spec::Spec::PrivacyParams(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_privacy_params(&mut self) -> PrivacyParameters {
            if self.has_privacy_params() {
                match self.spec.take() {
                    ::std::option::Option::Some(spec::Spec::PrivacyParams(v)) => v,
                    _ => panic!(),
                }
            } else {
                PrivacyParameters::new()
            }
        }

        // .sarus_data_spec.Scalar.RandomSeed random_seed = 4;

        pub fn random_seed(&self) -> &RandomSeed {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::RandomSeed(ref v)) => v,
                _ => <RandomSeed as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_random_seed(&mut self) {
            self.spec = ::std::option::Option::None;
        }

        pub fn has_random_seed(&self) -> bool {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::RandomSeed(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_random_seed(&mut self, v: RandomSeed) {
            self.spec = ::std::option::Option::Some(spec::Spec::RandomSeed(v))
        }

        // Mutable pointer to the field.
        pub fn mut_random_seed(&mut self) -> &mut RandomSeed {
            if let ::std::option::Option::Some(spec::Spec::RandomSeed(_)) = self.spec {
            } else {
                self.spec = ::std::option::Option::Some(spec::Spec::RandomSeed(RandomSeed::new()));
            }
            match self.spec {
                ::std::option::Option::Some(spec::Spec::RandomSeed(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_random_seed(&mut self) -> RandomSeed {
            if self.has_random_seed() {
                match self.spec.take() {
                    ::std::option::Option::Some(spec::Spec::RandomSeed(v)) => v,
                    _ => panic!(),
                }
            } else {
                RandomSeed::new()
            }
        }

        // .sarus_data_spec.Scalar.SyntheticModel synthetic_model = 5;

        pub fn synthetic_model(&self) -> &SyntheticModel {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::SyntheticModel(ref v)) => v,
                _ => <SyntheticModel as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_synthetic_model(&mut self) {
            self.spec = ::std::option::Option::None;
        }

        pub fn has_synthetic_model(&self) -> bool {
            match self.spec {
                ::std::option::Option::Some(spec::Spec::SyntheticModel(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_synthetic_model(&mut self, v: SyntheticModel) {
            self.spec = ::std::option::Option::Some(spec::Spec::SyntheticModel(v))
        }

        // Mutable pointer to the field.
        pub fn mut_synthetic_model(&mut self) -> &mut SyntheticModel {
            if let ::std::option::Option::Some(spec::Spec::SyntheticModel(_)) = self.spec {
            } else {
                self.spec = ::std::option::Option::Some(spec::Spec::SyntheticModel(SyntheticModel::new()));
            }
            match self.spec {
                ::std::option::Option::Some(spec::Spec::SyntheticModel(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_synthetic_model(&mut self) -> SyntheticModel {
            if self.has_synthetic_model() {
                match self.spec.take() {
                    ::std::option::Option::Some(spec::Spec::SyntheticModel(v)) => v,
                    _ => panic!(),
                }
            } else {
                SyntheticModel::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Transformed>(
                "transformed",
                Spec::has_transformed,
                Spec::transformed,
                Spec::mut_transformed,
                Spec::set_transformed,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Model>(
                "model",
                Spec::has_model,
                Spec::model,
                Spec::mut_model,
                Spec::set_model,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PrivacyParameters>(
                "privacy_params",
                Spec::has_privacy_params,
                Spec::privacy_params,
                Spec::mut_privacy_params,
                Spec::set_privacy_params,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RandomSeed>(
                "random_seed",
                Spec::has_random_seed,
                Spec::random_seed,
                Spec::mut_random_seed,
                Spec::set_random_seed,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SyntheticModel>(
                "synthetic_model",
                Spec::has_synthetic_model,
                Spec::synthetic_model,
                Spec::mut_synthetic_model,
                Spec::set_synthetic_model,
            ));
            oneofs.push(spec::Spec::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Spec>(
                "Scalar.Spec",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Spec {
        const NAME: &'static str = "Spec";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.spec = ::std::option::Option::Some(spec::Spec::Transformed(is.read_message()?));
                    },
                    18 => {
                        self.spec = ::std::option::Option::Some(spec::Spec::Model(is.read_message()?));
                    },
                    26 => {
                        self.spec = ::std::option::Option::Some(spec::Spec::PrivacyParams(is.read_message()?));
                    },
                    34 => {
                        self.spec = ::std::option::Option::Some(spec::Spec::RandomSeed(is.read_message()?));
                    },
                    42 => {
                        self.spec = ::std::option::Option::Some(spec::Spec::SyntheticModel(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.spec {
                match v {
                    &spec::Spec::Transformed(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &spec::Spec::Model(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &spec::Spec::PrivacyParams(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &spec::Spec::RandomSeed(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &spec::Spec::SyntheticModel(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.spec {
                match v {
                    &spec::Spec::Transformed(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &spec::Spec::Model(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                    &spec::Spec::PrivacyParams(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    },
                    &spec::Spec::RandomSeed(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                    },
                    &spec::Spec::SyntheticModel(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Spec {
            Spec::new()
        }

        fn clear(&mut self) {
            self.spec = ::std::option::Option::None;
            self.spec = ::std::option::Option::None;
            self.spec = ::std::option::Option::None;
            self.spec = ::std::option::Option::None;
            self.spec = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Spec {
            static instance: Spec = Spec {
                spec: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Spec {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Scalar.Spec").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Spec {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Spec {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Spec`
    pub mod spec {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:sarus_data_spec.Scalar.Spec.spec)
        pub enum Spec {
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Scalar.Spec.transformed)
            Transformed(super::Transformed),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Scalar.Spec.model)
            Model(super::Model),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Scalar.Spec.privacy_params)
            PrivacyParams(super::PrivacyParameters),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Scalar.Spec.random_seed)
            RandomSeed(super::RandomSeed),
            // @@protoc_insertion_point(oneof_field:sarus_data_spec.Scalar.Spec.synthetic_model)
            SyntheticModel(super::SyntheticModel),
        }

        impl ::protobuf::Oneof for Spec {
        }

        impl ::protobuf::OneofFull for Spec {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Spec as ::protobuf::MessageFull>::descriptor().oneof_by_name("spec").unwrap()).clone()
            }
        }

        impl Spec {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Spec>("spec")
            }
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Scalar.Transformed)
    pub struct Transformed {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Scalar.Transformed.transform)
        pub transform: ::std::string::String,
        // @@protoc_insertion_point(field:sarus_data_spec.Scalar.Transformed.arguments)
        pub arguments: ::std::vec::Vec<::std::string::String>,
        // @@protoc_insertion_point(field:sarus_data_spec.Scalar.Transformed.named_arguments)
        pub named_arguments: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Scalar.Transformed.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Transformed {
        fn default() -> &'a Transformed {
            <Transformed as ::protobuf::Message>::default_instance()
        }
    }

    impl Transformed {
        pub fn new() -> Transformed {
            ::std::default::Default::default()
        }

        // string transform = 1;

        pub fn transform(&self) -> &str {
            &self.transform
        }

        pub fn clear_transform(&mut self) {
            self.transform.clear();
        }

        // Param is passed by value, moved
        pub fn set_transform(&mut self, v: ::std::string::String) {
            self.transform = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_transform(&mut self) -> &mut ::std::string::String {
            &mut self.transform
        }

        // Take field
        pub fn take_transform(&mut self) -> ::std::string::String {
            ::std::mem::replace(&mut self.transform, ::std::string::String::new())
        }

        // repeated string arguments = 2;

        pub fn arguments(&self) -> &[::std::string::String] {
            &self.arguments
        }

        pub fn clear_arguments(&mut self) {
            self.arguments.clear();
        }

        // Param is passed by value, moved
        pub fn set_arguments(&mut self, v: ::std::vec::Vec<::std::string::String>) {
            self.arguments = v;
        }

        // Mutable pointer to the field.
        pub fn mut_arguments(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
            &mut self.arguments
        }

        // Take field
        pub fn take_arguments(&mut self) -> ::std::vec::Vec<::std::string::String> {
            ::std::mem::replace(&mut self.arguments, ::std::vec::Vec::new())
        }

        // repeated .sarus_data_spec.Scalar.Transformed.NamedArgumentsEntry named_arguments = 3;

        pub fn named_arguments(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
            &self.named_arguments
        }

        pub fn clear_named_arguments(&mut self) {
            self.named_arguments.clear();
        }

        // Param is passed by value, moved
        pub fn set_named_arguments(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
            self.named_arguments = v;
        }

        // Mutable pointer to the field.
        pub fn mut_named_arguments(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
            &mut self.named_arguments
        }

        // Take field
        pub fn take_named_arguments(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
            ::std::mem::replace(&mut self.named_arguments, ::std::collections::HashMap::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "transform",
                |m: &Transformed| { &m.transform },
                |m: &mut Transformed| { &mut m.transform },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "arguments",
                |m: &Transformed| { &m.arguments },
                |m: &mut Transformed| { &mut m.arguments },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
                "named_arguments",
                |m: &Transformed| { &m.named_arguments },
                |m: &mut Transformed| { &mut m.named_arguments },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transformed>(
                "Scalar.Transformed",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Transformed {
        const NAME: &'static str = "Transformed";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.transform = is.read_string()?;
                    },
                    18 => {
                        self.arguments.push(is.read_string()?);
                    },
                    26 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                18 => value = is.read_string()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.named_arguments.insert(key, value);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.transform.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.transform);
            }
            for value in &self.arguments {
                my_size += ::protobuf::rt::string_size(2, &value);
            };
            for (k, v) in &self.named_arguments {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.transform.is_empty() {
                os.write_string(1, &self.transform)?;
            }
            for v in &self.arguments {
                os.write_string(2, &v)?;
            };
            for (k, v) in &self.named_arguments {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                os.write_raw_varint32(26)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                os.write_string(2, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Transformed {
            Transformed::new()
        }

        fn clear(&mut self) {
            self.transform.clear();
            self.arguments.clear();
            self.named_arguments.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Transformed {
            static instance: ::protobuf::rt::Lazy<Transformed> = ::protobuf::rt::Lazy::new();
            instance.get(Transformed::new)
        }
    }

    impl ::protobuf::MessageFull for Transformed {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Scalar.Transformed").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Transformed {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Transformed {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Scalar.Model)
    pub struct Model {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Scalar.Model.arguments)
        pub arguments: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:sarus_data_spec.Scalar.Model.named_arguments)
        pub named_arguments: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:sarus_data_spec.Scalar.Model.model_class)
        pub model_class: ::protobuf::EnumOrUnknown<model::ModelClass>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Scalar.Model.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Model {
        fn default() -> &'a Model {
            <Model as ::protobuf::Message>::default_instance()
        }
    }

    impl Model {
        pub fn new() -> Model {
            ::std::default::Default::default()
        }

        // bytes arguments = 1;

        pub fn arguments(&self) -> &[u8] {
            &self.arguments
        }

        pub fn clear_arguments(&mut self) {
            self.arguments.clear();
        }

        // Param is passed by value, moved
        pub fn set_arguments(&mut self, v: ::std::vec::Vec<u8>) {
            self.arguments = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_arguments(&mut self) -> &mut ::std::vec::Vec<u8> {
            &mut self.arguments
        }

        // Take field
        pub fn take_arguments(&mut self) -> ::std::vec::Vec<u8> {
            ::std::mem::replace(&mut self.arguments, ::std::vec::Vec::new())
        }

        // bytes named_arguments = 2;

        pub fn named_arguments(&self) -> &[u8] {
            &self.named_arguments
        }

        pub fn clear_named_arguments(&mut self) {
            self.named_arguments.clear();
        }

        // Param is passed by value, moved
        pub fn set_named_arguments(&mut self, v: ::std::vec::Vec<u8>) {
            self.named_arguments = v;
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_named_arguments(&mut self) -> &mut ::std::vec::Vec<u8> {
            &mut self.named_arguments
        }

        // Take field
        pub fn take_named_arguments(&mut self) -> ::std::vec::Vec<u8> {
            ::std::mem::replace(&mut self.named_arguments, ::std::vec::Vec::new())
        }

        // .sarus_data_spec.Scalar.Model.ModelClass model_class = 3;

        pub fn model_class(&self) -> model::ModelClass {
            self.model_class.enum_value_or_default()
        }

        pub fn clear_model_class(&mut self) {
            self.model_class = ::protobuf::EnumOrUnknown::new(model::ModelClass::TF_KERAS);
        }

        // Param is passed by value, moved
        pub fn set_model_class(&mut self, v: model::ModelClass) {
            self.model_class = ::protobuf::EnumOrUnknown::new(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "arguments",
                |m: &Model| { &m.arguments },
                |m: &mut Model| { &mut m.arguments },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "named_arguments",
                |m: &Model| { &m.named_arguments },
                |m: &mut Model| { &mut m.named_arguments },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "model_class",
                |m: &Model| { &m.model_class },
                |m: &mut Model| { &mut m.model_class },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Model>(
                "Scalar.Model",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Model {
        const NAME: &'static str = "Model";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.arguments = is.read_bytes()?;
                    },
                    18 => {
                        self.named_arguments = is.read_bytes()?;
                    },
                    24 => {
                        self.model_class = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.arguments.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.arguments);
            }
            if !self.named_arguments.is_empty() {
                my_size += ::protobuf::rt::bytes_size(2, &self.named_arguments);
            }
            if self.model_class != ::protobuf::EnumOrUnknown::new(model::ModelClass::TF_KERAS) {
                my_size += ::protobuf::rt::int32_size(3, self.model_class.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.arguments.is_empty() {
                os.write_bytes(1, &self.arguments)?;
            }
            if !self.named_arguments.is_empty() {
                os.write_bytes(2, &self.named_arguments)?;
            }
            if self.model_class != ::protobuf::EnumOrUnknown::new(model::ModelClass::TF_KERAS) {
                os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.model_class))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Model {
            Model::new()
        }

        fn clear(&mut self) {
            self.arguments.clear();
            self.named_arguments.clear();
            self.model_class = ::protobuf::EnumOrUnknown::new(model::ModelClass::TF_KERAS);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Model {
            static instance: Model = Model {
                arguments: ::std::vec::Vec::new(),
                named_arguments: ::std::vec::Vec::new(),
                model_class: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Model {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Scalar.Model").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Model {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Model {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Model`
    pub mod model {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:sarus_data_spec.Scalar.Model.ModelClass)
        pub enum ModelClass {
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.TF_KERAS)
            TF_KERAS = 0,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_SVC)
            SK_SVC = 1,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_ONEHOT)
            SK_ONEHOT = 2,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_PCA)
            SK_PCA = 3,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_AFFINITY_PROPAGATION)
            SK_AFFINITY_PROPAGATION = 4,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_AGGLOMERATIVE_CLUSTERING)
            SK_AGGLOMERATIVE_CLUSTERING = 5,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_BIRCH)
            SK_BIRCH = 6,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_DBSCAN)
            SK_DBSCAN = 7,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_FEATURE_AGGLOMERATION)
            SK_FEATURE_AGGLOMERATION = 8,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_KMEANS)
            SK_KMEANS = 9,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_MINIBATCH_KMEANS)
            SK_MINIBATCH_KMEANS = 10,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_MEAN_SHIFT)
            SK_MEAN_SHIFT = 11,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_OPTICS)
            SK_OPTICS = 12,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_SPECTRAL_CLUSTERING)
            SK_SPECTRAL_CLUSTERING = 13,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_SPECTRAL_BICLUSTERING)
            SK_SPECTRAL_BICLUSTERING = 14,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_SPECTRAL_COCLUSTERING)
            SK_SPECTRAL_COCLUSTERING = 15,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_ADABOOST_CLASSIFIER)
            SK_ADABOOST_CLASSIFIER = 60,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_ADABOOST_REGRESSOR)
            SK_ADABOOST_REGRESSOR = 61,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_BAGGING_CLASSIFIER)
            SK_BAGGING_CLASSIFIER = 62,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_BAGGING_REGRESSOR)
            SK_BAGGING_REGRESSOR = 63,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_EXTRA_TREES_REGRESSOR)
            SK_EXTRA_TREES_REGRESSOR = 64,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_EXTRA_TREES_CLASSIFIER)
            SK_EXTRA_TREES_CLASSIFIER = 65,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_GRADIENT_BOOSTING_CLASSIFIER)
            SK_GRADIENT_BOOSTING_CLASSIFIER = 66,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_GRADIENT_BOOSTING_REGRESSOR)
            SK_GRADIENT_BOOSTING_REGRESSOR = 67,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_ISOLATION_FOREST)
            SK_ISOLATION_FOREST = 68,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_RANDOM_FOREST_CLASSIFIER)
            SK_RANDOM_FOREST_CLASSIFIER = 69,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_RANDOM_FOREST_REGRESSOR)
            SK_RANDOM_FOREST_REGRESSOR = 70,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_RANDOM_TREES_EMBEDDING)
            SK_RANDOM_TREES_EMBEDDING = 71,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_STACKING_CLASSIFIER)
            SK_STACKING_CLASSIFIER = 72,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_STACKING_REGRESSOR)
            SK_STACKING_REGRESSOR = 73,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_VOTING_CLASSIFIER)
            SK_VOTING_CLASSIFIER = 74,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_VOTING_REGRESSOR)
            SK_VOTING_REGRESSOR = 75,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_HIST_GRADIENT_BOOSTING_REGRESSOR)
            SK_HIST_GRADIENT_BOOSTING_REGRESSOR = 76,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_HIST_GRADIENT_BOOSTING_CLASSIFIER)
            SK_HIST_GRADIENT_BOOSTING_CLASSIFIER = 77,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_REPEATED_STRATIFIED_KFOLD)
            SK_REPEATED_STRATIFIED_KFOLD = 80,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.XGB_CLASSIFIER)
            XGB_CLASSIFIER = 92,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_LABEL_ENCODER)
            SK_LABEL_ENCODER = 98,
            // @@protoc_insertion_point(enum_value:sarus_data_spec.Scalar.Model.ModelClass.SK_KFOLD)
            SK_KFOLD = 99,
        }

        impl ::protobuf::Enum for ModelClass {
            const NAME: &'static str = "ModelClass";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<ModelClass> {
                match value {
                    0 => ::std::option::Option::Some(ModelClass::TF_KERAS),
                    1 => ::std::option::Option::Some(ModelClass::SK_SVC),
                    2 => ::std::option::Option::Some(ModelClass::SK_ONEHOT),
                    3 => ::std::option::Option::Some(ModelClass::SK_PCA),
                    4 => ::std::option::Option::Some(ModelClass::SK_AFFINITY_PROPAGATION),
                    5 => ::std::option::Option::Some(ModelClass::SK_AGGLOMERATIVE_CLUSTERING),
                    6 => ::std::option::Option::Some(ModelClass::SK_BIRCH),
                    7 => ::std::option::Option::Some(ModelClass::SK_DBSCAN),
                    8 => ::std::option::Option::Some(ModelClass::SK_FEATURE_AGGLOMERATION),
                    9 => ::std::option::Option::Some(ModelClass::SK_KMEANS),
                    10 => ::std::option::Option::Some(ModelClass::SK_MINIBATCH_KMEANS),
                    11 => ::std::option::Option::Some(ModelClass::SK_MEAN_SHIFT),
                    12 => ::std::option::Option::Some(ModelClass::SK_OPTICS),
                    13 => ::std::option::Option::Some(ModelClass::SK_SPECTRAL_CLUSTERING),
                    14 => ::std::option::Option::Some(ModelClass::SK_SPECTRAL_BICLUSTERING),
                    15 => ::std::option::Option::Some(ModelClass::SK_SPECTRAL_COCLUSTERING),
                    60 => ::std::option::Option::Some(ModelClass::SK_ADABOOST_CLASSIFIER),
                    61 => ::std::option::Option::Some(ModelClass::SK_ADABOOST_REGRESSOR),
                    62 => ::std::option::Option::Some(ModelClass::SK_BAGGING_CLASSIFIER),
                    63 => ::std::option::Option::Some(ModelClass::SK_BAGGING_REGRESSOR),
                    64 => ::std::option::Option::Some(ModelClass::SK_EXTRA_TREES_REGRESSOR),
                    65 => ::std::option::Option::Some(ModelClass::SK_EXTRA_TREES_CLASSIFIER),
                    66 => ::std::option::Option::Some(ModelClass::SK_GRADIENT_BOOSTING_CLASSIFIER),
                    67 => ::std::option::Option::Some(ModelClass::SK_GRADIENT_BOOSTING_REGRESSOR),
                    68 => ::std::option::Option::Some(ModelClass::SK_ISOLATION_FOREST),
                    69 => ::std::option::Option::Some(ModelClass::SK_RANDOM_FOREST_CLASSIFIER),
                    70 => ::std::option::Option::Some(ModelClass::SK_RANDOM_FOREST_REGRESSOR),
                    71 => ::std::option::Option::Some(ModelClass::SK_RANDOM_TREES_EMBEDDING),
                    72 => ::std::option::Option::Some(ModelClass::SK_STACKING_CLASSIFIER),
                    73 => ::std::option::Option::Some(ModelClass::SK_STACKING_REGRESSOR),
                    74 => ::std::option::Option::Some(ModelClass::SK_VOTING_CLASSIFIER),
                    75 => ::std::option::Option::Some(ModelClass::SK_VOTING_REGRESSOR),
                    76 => ::std::option::Option::Some(ModelClass::SK_HIST_GRADIENT_BOOSTING_REGRESSOR),
                    77 => ::std::option::Option::Some(ModelClass::SK_HIST_GRADIENT_BOOSTING_CLASSIFIER),
                    80 => ::std::option::Option::Some(ModelClass::SK_REPEATED_STRATIFIED_KFOLD),
                    92 => ::std::option::Option::Some(ModelClass::XGB_CLASSIFIER),
                    98 => ::std::option::Option::Some(ModelClass::SK_LABEL_ENCODER),
                    99 => ::std::option::Option::Some(ModelClass::SK_KFOLD),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [ModelClass] = &[
                ModelClass::TF_KERAS,
                ModelClass::SK_SVC,
                ModelClass::SK_ONEHOT,
                ModelClass::SK_PCA,
                ModelClass::SK_AFFINITY_PROPAGATION,
                ModelClass::SK_AGGLOMERATIVE_CLUSTERING,
                ModelClass::SK_BIRCH,
                ModelClass::SK_DBSCAN,
                ModelClass::SK_FEATURE_AGGLOMERATION,
                ModelClass::SK_KMEANS,
                ModelClass::SK_MINIBATCH_KMEANS,
                ModelClass::SK_MEAN_SHIFT,
                ModelClass::SK_OPTICS,
                ModelClass::SK_SPECTRAL_CLUSTERING,
                ModelClass::SK_SPECTRAL_BICLUSTERING,
                ModelClass::SK_SPECTRAL_COCLUSTERING,
                ModelClass::SK_ADABOOST_CLASSIFIER,
                ModelClass::SK_ADABOOST_REGRESSOR,
                ModelClass::SK_BAGGING_CLASSIFIER,
                ModelClass::SK_BAGGING_REGRESSOR,
                ModelClass::SK_EXTRA_TREES_REGRESSOR,
                ModelClass::SK_EXTRA_TREES_CLASSIFIER,
                ModelClass::SK_GRADIENT_BOOSTING_CLASSIFIER,
                ModelClass::SK_GRADIENT_BOOSTING_REGRESSOR,
                ModelClass::SK_ISOLATION_FOREST,
                ModelClass::SK_RANDOM_FOREST_CLASSIFIER,
                ModelClass::SK_RANDOM_FOREST_REGRESSOR,
                ModelClass::SK_RANDOM_TREES_EMBEDDING,
                ModelClass::SK_STACKING_CLASSIFIER,
                ModelClass::SK_STACKING_REGRESSOR,
                ModelClass::SK_VOTING_CLASSIFIER,
                ModelClass::SK_VOTING_REGRESSOR,
                ModelClass::SK_HIST_GRADIENT_BOOSTING_REGRESSOR,
                ModelClass::SK_HIST_GRADIENT_BOOSTING_CLASSIFIER,
                ModelClass::SK_REPEATED_STRATIFIED_KFOLD,
                ModelClass::XGB_CLASSIFIER,
                ModelClass::SK_LABEL_ENCODER,
                ModelClass::SK_KFOLD,
            ];
        }

        impl ::protobuf::EnumFull for ModelClass {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("Scalar.Model.ModelClass").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = match self {
                    ModelClass::TF_KERAS => 0,
                    ModelClass::SK_SVC => 1,
                    ModelClass::SK_ONEHOT => 2,
                    ModelClass::SK_PCA => 3,
                    ModelClass::SK_AFFINITY_PROPAGATION => 4,
                    ModelClass::SK_AGGLOMERATIVE_CLUSTERING => 5,
                    ModelClass::SK_BIRCH => 6,
                    ModelClass::SK_DBSCAN => 7,
                    ModelClass::SK_FEATURE_AGGLOMERATION => 8,
                    ModelClass::SK_KMEANS => 9,
                    ModelClass::SK_MINIBATCH_KMEANS => 10,
                    ModelClass::SK_MEAN_SHIFT => 11,
                    ModelClass::SK_OPTICS => 12,
                    ModelClass::SK_SPECTRAL_CLUSTERING => 13,
                    ModelClass::SK_SPECTRAL_BICLUSTERING => 14,
                    ModelClass::SK_SPECTRAL_COCLUSTERING => 15,
                    ModelClass::SK_ADABOOST_CLASSIFIER => 16,
                    ModelClass::SK_ADABOOST_REGRESSOR => 17,
                    ModelClass::SK_BAGGING_CLASSIFIER => 18,
                    ModelClass::SK_BAGGING_REGRESSOR => 19,
                    ModelClass::SK_EXTRA_TREES_REGRESSOR => 20,
                    ModelClass::SK_EXTRA_TREES_CLASSIFIER => 21,
                    ModelClass::SK_GRADIENT_BOOSTING_CLASSIFIER => 22,
                    ModelClass::SK_GRADIENT_BOOSTING_REGRESSOR => 23,
                    ModelClass::SK_ISOLATION_FOREST => 24,
                    ModelClass::SK_RANDOM_FOREST_CLASSIFIER => 25,
                    ModelClass::SK_RANDOM_FOREST_REGRESSOR => 26,
                    ModelClass::SK_RANDOM_TREES_EMBEDDING => 27,
                    ModelClass::SK_STACKING_CLASSIFIER => 28,
                    ModelClass::SK_STACKING_REGRESSOR => 29,
                    ModelClass::SK_VOTING_CLASSIFIER => 30,
                    ModelClass::SK_VOTING_REGRESSOR => 31,
                    ModelClass::SK_HIST_GRADIENT_BOOSTING_REGRESSOR => 32,
                    ModelClass::SK_HIST_GRADIENT_BOOSTING_CLASSIFIER => 33,
                    ModelClass::SK_REPEATED_STRATIFIED_KFOLD => 34,
                    ModelClass::XGB_CLASSIFIER => 35,
                    ModelClass::SK_LABEL_ENCODER => 36,
                    ModelClass::SK_KFOLD => 37,
                };
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for ModelClass {
            fn default() -> Self {
                ModelClass::TF_KERAS
            }
        }

        impl ModelClass {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ModelClass>("Scalar.Model.ModelClass")
            }
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Scalar.PrivacyParameters)
    pub struct PrivacyParameters {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Scalar.PrivacyParameters.points)
        pub points: ::std::vec::Vec<privacy_parameters::Point>,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Scalar.PrivacyParameters.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PrivacyParameters {
        fn default() -> &'a PrivacyParameters {
            <PrivacyParameters as ::protobuf::Message>::default_instance()
        }
    }

    impl PrivacyParameters {
        pub fn new() -> PrivacyParameters {
            ::std::default::Default::default()
        }

        // repeated .sarus_data_spec.Scalar.PrivacyParameters.Point points = 1;

        pub fn points(&self) -> &[privacy_parameters::Point] {
            &self.points
        }

        pub fn clear_points(&mut self) {
            self.points.clear();
        }

        // Param is passed by value, moved
        pub fn set_points(&mut self, v: ::std::vec::Vec<privacy_parameters::Point>) {
            self.points = v;
        }

        // Mutable pointer to the field.
        pub fn mut_points(&mut self) -> &mut ::std::vec::Vec<privacy_parameters::Point> {
            &mut self.points
        }

        // Take field
        pub fn take_points(&mut self) -> ::std::vec::Vec<privacy_parameters::Point> {
            ::std::mem::replace(&mut self.points, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "points",
                |m: &PrivacyParameters| { &m.points },
                |m: &mut PrivacyParameters| { &mut m.points },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PrivacyParameters>(
                "Scalar.PrivacyParameters",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PrivacyParameters {
        const NAME: &'static str = "PrivacyParameters";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.points.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.points {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.points {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PrivacyParameters {
            PrivacyParameters::new()
        }

        fn clear(&mut self) {
            self.points.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PrivacyParameters {
            static instance: PrivacyParameters = PrivacyParameters {
                points: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PrivacyParameters {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Scalar.PrivacyParameters").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PrivacyParameters {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PrivacyParameters {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `PrivacyParameters`
    pub mod privacy_parameters {
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:sarus_data_spec.Scalar.PrivacyParameters.Point)
        pub struct Point {
            // message fields
            // @@protoc_insertion_point(field:sarus_data_spec.Scalar.PrivacyParameters.Point.epsilon)
            pub epsilon: f64,
            // @@protoc_insertion_point(field:sarus_data_spec.Scalar.PrivacyParameters.Point.delta)
            pub delta: f64,
            // special fields
            // @@protoc_insertion_point(special_field:sarus_data_spec.Scalar.PrivacyParameters.Point.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Point {
            fn default() -> &'a Point {
                <Point as ::protobuf::Message>::default_instance()
            }
        }

        impl Point {
            pub fn new() -> Point {
                ::std::default::Default::default()
            }

            // double epsilon = 1;

            pub fn epsilon(&self) -> f64 {
                self.epsilon
            }

            pub fn clear_epsilon(&mut self) {
                self.epsilon = 0.;
            }

            // Param is passed by value, moved
            pub fn set_epsilon(&mut self, v: f64) {
                self.epsilon = v;
            }

            // double delta = 2;

            pub fn delta(&self) -> f64 {
                self.delta
            }

            pub fn clear_delta(&mut self) {
                self.delta = 0.;
            }

            // Param is passed by value, moved
            pub fn set_delta(&mut self, v: f64) {
                self.delta = v;
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "epsilon",
                    |m: &Point| { &m.epsilon },
                    |m: &mut Point| { &mut m.epsilon },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "delta",
                    |m: &Point| { &m.delta },
                    |m: &mut Point| { &mut m.delta },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Point>(
                    "Scalar.PrivacyParameters.Point",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Point {
            const NAME: &'static str = "Point";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        9 => {
                            self.epsilon = is.read_double()?;
                        },
                        17 => {
                            self.delta = is.read_double()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.epsilon != 0. {
                    my_size += 1 + 8;
                }
                if self.delta != 0. {
                    my_size += 1 + 8;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.epsilon != 0. {
                    os.write_double(1, self.epsilon)?;
                }
                if self.delta != 0. {
                    os.write_double(2, self.delta)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Point {
                Point::new()
            }

            fn clear(&mut self) {
                self.epsilon = 0.;
                self.delta = 0.;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Point {
                static instance: Point = Point {
                    epsilon: 0.,
                    delta: 0.,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Point {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Scalar.PrivacyParameters.Point").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Point {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Point {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Scalar.RandomSeed)
    pub struct RandomSeed {
        // message fields
        // @@protoc_insertion_point(field:sarus_data_spec.Scalar.RandomSeed.value)
        pub value: i32,
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Scalar.RandomSeed.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RandomSeed {
        fn default() -> &'a RandomSeed {
            <RandomSeed as ::protobuf::Message>::default_instance()
        }
    }

    impl RandomSeed {
        pub fn new() -> RandomSeed {
            ::std::default::Default::default()
        }

        // int32 value = 1;

        pub fn value(&self) -> i32 {
            self.value
        }

        pub fn clear_value(&mut self) {
            self.value = 0;
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: i32) {
            self.value = v;
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "value",
                |m: &RandomSeed| { &m.value },
                |m: &mut RandomSeed| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RandomSeed>(
                "Scalar.RandomSeed",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RandomSeed {
        const NAME: &'static str = "RandomSeed";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.value = is.read_int32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.value != 0 {
                my_size += ::protobuf::rt::int32_size(1, self.value);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.value != 0 {
                os.write_int32(1, self.value)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RandomSeed {
            RandomSeed::new()
        }

        fn clear(&mut self) {
            self.value = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RandomSeed {
            static instance: RandomSeed = RandomSeed {
                value: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RandomSeed {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Scalar.RandomSeed").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RandomSeed {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RandomSeed {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:sarus_data_spec.Scalar.SyntheticModel)
    pub struct SyntheticModel {
        // special fields
        // @@protoc_insertion_point(special_field:sarus_data_spec.Scalar.SyntheticModel.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SyntheticModel {
        fn default() -> &'a SyntheticModel {
            <SyntheticModel as ::protobuf::Message>::default_instance()
        }
    }

    impl SyntheticModel {
        pub fn new() -> SyntheticModel {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(0);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SyntheticModel>(
                "Scalar.SyntheticModel",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for SyntheticModel {
        const NAME: &'static str = "SyntheticModel";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SyntheticModel {
            SyntheticModel::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SyntheticModel {
            static instance: SyntheticModel = SyntheticModel {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for SyntheticModel {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Scalar.SyntheticModel").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for SyntheticModel {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for SyntheticModel {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%sarus_data_spec/protobuf/scalar.proto\x12\x0fsarus_data_spec\"\xb7\
    \x11\n\x06Scalar\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuid\x12\x12\n\
    \x04name\x18\x02\x20\x01(\tR\x04name\x12\x10\n\x03doc\x18\x03\x20\x01(\t\
    R\x03doc\x120\n\x04spec\x18\x04\x20\x01(\x0b2\x1c.sarus_data_spec.Scalar\
    .SpecR\x04spec\x12G\n\nproperties\x18\x05\x20\x03(\x0b2'.sarus_data_spec\
    .Scalar.PropertiesEntryR\nproperties\x1a=\n\x0fPropertiesEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\x1a\xfc\x02\n\x04Spec\x12G\n\x0btransformed\x18\x01\
    \x20\x01(\x0b2#.sarus_data_spec.Scalar.TransformedH\0R\x0btransformed\
    \x125\n\x05model\x18\x02\x20\x01(\x0b2\x1d.sarus_data_spec.Scalar.ModelH\
    \0R\x05model\x12R\n\x0eprivacy_params\x18\x03\x20\x01(\x0b2).sarus_data_\
    spec.Scalar.PrivacyParametersH\0R\rprivacyParams\x12E\n\x0brandom_seed\
    \x18\x04\x20\x01(\x0b2\".sarus_data_spec.Scalar.RandomSeedH\0R\nrandomSe\
    ed\x12Q\n\x0fsynthetic_model\x18\x05\x20\x01(\x0b2&.sarus_data_spec.Scal\
    ar.SyntheticModelH\0R\x0esyntheticModelB\x06\n\x04spec\x1a\xee\x01\n\x0b\
    Transformed\x12\x1c\n\ttransform\x18\x01\x20\x01(\tR\ttransform\x12\x1c\
    \n\targuments\x18\x02\x20\x03(\tR\targuments\x12`\n\x0fnamed_arguments\
    \x18\x03\x20\x03(\x0b27.sarus_data_spec.Scalar.Transformed.NamedArgument\
    sEntryR\x0enamedArguments\x1aA\n\x13NamedArgumentsEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05va\
    lue:\x028\x01\x1a\xfa\x08\n\x05Model\x12\x1c\n\targuments\x18\x01\x20\
    \x01(\x0cR\targuments\x12'\n\x0fnamed_arguments\x18\x02\x20\x01(\x0cR\
    \x0enamedArguments\x12I\n\x0bmodel_class\x18\x03\x20\x01(\x0e2(.sarus_da\
    ta_spec.Scalar.Model.ModelClassR\nmodelClass\"\xde\x07\n\nModelClass\x12\
    \x0c\n\x08TF_KERAS\x10\0\x12\n\n\x06SK_SVC\x10\x01\x12\r\n\tSK_ONEHOT\
    \x10\x02\x12\n\n\x06SK_PCA\x10\x03\x12\x1b\n\x17SK_AFFINITY_PROPAGATION\
    \x10\x04\x12\x1f\n\x1bSK_AGGLOMERATIVE_CLUSTERING\x10\x05\x12\x0c\n\x08S\
    K_BIRCH\x10\x06\x12\r\n\tSK_DBSCAN\x10\x07\x12\x1c\n\x18SK_FEATURE_AGGLO\
    MERATION\x10\x08\x12\r\n\tSK_KMEANS\x10\t\x12\x17\n\x13SK_MINIBATCH_KMEA\
    NS\x10\n\x12\x11\n\rSK_MEAN_SHIFT\x10\x0b\x12\r\n\tSK_OPTICS\x10\x0c\x12\
    \x1a\n\x16SK_SPECTRAL_CLUSTERING\x10\r\x12\x1c\n\x18SK_SPECTRAL_BICLUSTE\
    RING\x10\x0e\x12\x1c\n\x18SK_SPECTRAL_COCLUSTERING\x10\x0f\x12\x1a\n\x16\
    SK_ADABOOST_CLASSIFIER\x10<\x12\x19\n\x15SK_ADABOOST_REGRESSOR\x10=\x12\
    \x19\n\x15SK_BAGGING_CLASSIFIER\x10>\x12\x18\n\x14SK_BAGGING_REGRESSOR\
    \x10?\x12\x1c\n\x18SK_EXTRA_TREES_REGRESSOR\x10@\x12\x1d\n\x19SK_EXTRA_T\
    REES_CLASSIFIER\x10A\x12#\n\x1fSK_GRADIENT_BOOSTING_CLASSIFIER\x10B\x12\
    \"\n\x1eSK_GRADIENT_BOOSTING_REGRESSOR\x10C\x12\x17\n\x13SK_ISOLATION_FO\
    REST\x10D\x12\x1f\n\x1bSK_RANDOM_FOREST_CLASSIFIER\x10E\x12\x1e\n\x1aSK_\
    RANDOM_FOREST_REGRESSOR\x10F\x12\x1d\n\x19SK_RANDOM_TREES_EMBEDDING\x10G\
    \x12\x1a\n\x16SK_STACKING_CLASSIFIER\x10H\x12\x19\n\x15SK_STACKING_REGRE\
    SSOR\x10I\x12\x18\n\x14SK_VOTING_CLASSIFIER\x10J\x12\x17\n\x13SK_VOTING_\
    REGRESSOR\x10K\x12'\n#SK_HIST_GRADIENT_BOOSTING_REGRESSOR\x10L\x12(\n$SK\
    _HIST_GRADIENT_BOOSTING_CLASSIFIER\x10M\x12\x20\n\x1cSK_REPEATED_STRATIF\
    IED_KFOLD\x10P\x12\x12\n\x0eXGB_CLASSIFIER\x10\\\x12\x14\n\x10SK_LABEL_E\
    NCODER\x10b\x12\x0c\n\x08SK_KFOLD\x10c\x1a\x95\x01\n\x11PrivacyParameter\
    s\x12G\n\x06points\x18\x01\x20\x03(\x0b2/.sarus_data_spec.Scalar.Privacy\
    Parameters.PointR\x06points\x1a7\n\x05Point\x12\x18\n\x07epsilon\x18\x01\
    \x20\x01(\x01R\x07epsilon\x12\x14\n\x05delta\x18\x02\x20\x01(\x01R\x05de\
    lta\x1a\"\n\nRandomSeed\x12\x14\n\x05value\x18\x01\x20\x01(\x05R\x05valu\
    e\x1a\x10\n\x0eSyntheticModelb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(Scalar::generated_message_descriptor_data());
            messages.push(scalar::Spec::generated_message_descriptor_data());
            messages.push(scalar::Transformed::generated_message_descriptor_data());
            messages.push(scalar::Model::generated_message_descriptor_data());
            messages.push(scalar::PrivacyParameters::generated_message_descriptor_data());
            messages.push(scalar::RandomSeed::generated_message_descriptor_data());
            messages.push(scalar::SyntheticModel::generated_message_descriptor_data());
            messages.push(scalar::privacy_parameters::Point::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(scalar::model::ModelClass::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
